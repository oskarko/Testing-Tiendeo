// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TiendeoCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import Alamofire
import AppTrackingTransparency
import CloudKit
import Combine
import CoreData
import CoreLocation
import Foundation
import Kingfisher
import MapKit
import RxSwift
import Swift
import SwiftUI
import TiendeoGovernor
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class ConfigService {
  public static let sharedInstance: TiendeoCore.ConfigService
  public func setGlobalIntegrations(_ global: TiendeoCore.GlobalIntegrationsWrapper)
  public func getConfig() -> TiendeoCore.Config
  public func getIntegration() -> TiendeoCore.Integration
  public func isLoaded() -> Swift.Bool
  public func getBaseUrlStatsApi() -> Swift.String?
  public func showCashbackWebView() -> Swift.Bool
  @objc deinit
}
extension TiendeoCore.ProductLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.ProductLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var checked: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var list: TiendeoCore.ShoppingListLocal? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(PrintStatCatalogLocal) public class PrintStatCatalogLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GeofenceLocal) public class GeofenceLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum TndStyles : Swift.String {
  case HeadBigBold
  case HeadBigSemibold
  case HeadBigRegular
  case HeadNormalBold
  case HeadNormalSemibold
  case HeadNormalRegular
  case HeadSmallBold
  case HeadSmallSemibold
  case HeadSmallRegular
  case TextNormalBold
  case TextNormalSemibold
  case TextNormalRegular
  case TextMediumBold
  case TextMediumSemibold
  case TextMediumRegular
  case TextSmallBold
  case TextSmallSemibold
  case TextSmallRegular
  case TextXSmallBold
  case TextXSmallSemibold
  case TextXSmallRegular
  case TextCaptionBold
  case TextCaptionSemibold
  case TextCaptionRegular
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class TndFontStyles {
  public static func fontForStyle(_ style: TiendeoCore.TndStyles) -> UIKit.UIFont
  public static func fontForStyle(_ style: Swift.String) -> UIKit.UIFont
  @objc deinit
}
public class GetRecommendedRetailers {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  @objc deinit
}
public class GetRecommendedRetailersRequestValues {
  public var countryCode: Swift.String
  final public let searchWord: Swift.String
  final public let start: Swift.Int
  final public let count: Swift.Int
  public init(countryCode: Swift.String, searchWord: Swift.String, start: Swift.Int = 0, count: Swift.Int = 100)
  @objc deinit
}
public protocol StoresRepository {
  func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.Store>
}
public struct ConfigDataRepository : TiendeoCore.ConfigRepository {
  public init(dataSources: [TiendeoCore.ConfigDataSource])
  public func getGlobalIntegrations(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper>
  public func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public struct BannerActionStatsEntity {
  public let bannerId: Swift.String
  public let clientTimeStamp: Swift.String
  public let integration: Swift.String?
  public let openingHash: Swift.String
  public let origin: Swift.String?
  public let platform: Swift.String
  public let provider: Swift.String?
  public let searchCity: Swift.String?
  public let searchWord: Swift.String?
  public let timeZoneOffset: Swift.Int
  public let userToken: Swift.String
  public let view: Swift.String?
  public let version: Swift.String
  public init(bannerId: Swift.String, integration: Swift.String?, origin: Swift.String?, provider: Swift.String?, searchCity: Swift.String?, searchWord: Swift.String?, userToken: Swift.String, view: Swift.String?)
}
public struct NotificationStatsEventEntity {
  public init(action: Swift.String?, catalogId: Swift.String?, channel: Swift.String?, clientTimeStamp: Swift.String?, eventName: Swift.String?, notificationId: Swift.String?, latitude: Swift.Float?, longitude: Swift.Float?, os: Swift.String?, platform: Swift.String?, provider: Swift.String?, locationType: Swift.String?, selectedLatitude: Swift.Float?, selectedLongitude: Swift.Float?, country: Swift.String?, senderToken: Swift.String?, timeZoneOffset: Swift.Int?, userToken: Swift.String?, version: Swift.String?, type: Swift.String?, idGeofence: Swift.String?, retailerId: Swift.String?)
}
extension TiendeoCore.InputStatsEntity {
  public func transformToNotificationStatsEventEntity(type: Swift.String?, countryCode: Swift.String?, idGeofence: Swift.String? = nil) -> TiendeoCore.NotificationStatsEventEntity
}
public struct CatalogSectionViewEntity {
  public let id: Swift.String
  public let catalogId: Swift.String
  public let name: Swift.String
  public let page: Swift.Int
  public let category: Swift.Int
  public let pageRange: Swift.ClosedRange<Swift.Int>
  public init(id: Swift.String, catalogId: Swift.String, name: Swift.String, page: Swift.Int, category: Swift.Int, pageRange: Swift.ClosedRange<Swift.Int>)
}
extension TiendeoCore.CatalogSection {
  public func transformToUI(with range: Swift.ClosedRange<Swift.Int>) -> TiendeoCore.CatalogSectionViewEntity
}
extension Swift.Sequence where Self.Element == TiendeoCore.CatalogSection {
  public func transformToUI(numPages: Swift.Int) -> [TiendeoCore.CatalogSectionViewEntity]
}
public struct ProductsRemoteDataSource : TiendeoCore.ProductsDataSource {
  public init()
  public func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
  public func getSavedProductsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateSavedProductsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool?>
}
@_inheritsConvenienceInitializers @objc(CategoryLocal) public class CategoryLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
extension UIKit.UIColor {
  public class var tndLightGrey0: UIKit.UIColor {
    get
  }
  public class var tndLightGrey72: UIKit.UIColor {
    get
  }
  public class var tndReddish: UIKit.UIColor {
    get
  }
  public class var tndMediumGrey: UIKit.UIColor {
    get
  }
  public class var tndWhite92: UIKit.UIColor {
    get
  }
  public class var tndAlmostBlack: UIKit.UIColor {
    get
  }
  public class var tndTealish: UIKit.UIColor {
    get
  }
  public class var tndBlack: UIKit.UIColor {
    get
  }
  public class var tndLightGrey: UIKit.UIColor {
    get
  }
  public class var tndSmoke: UIKit.UIColor {
    get
  }
  public class var tndLightGreyTwo: UIKit.UIColor {
    get
  }
  public class var mediumGrey8: UIKit.UIColor {
    get
  }
  public class var tndOrange: UIKit.UIColor {
    get
  }
  public class var rouge: UIKit.UIColor {
    get
  }
  public class var leaf: UIKit.UIColor {
    get
  }
  public class var mediumPurple: UIKit.UIColor {
    get
  }
  public class var wineRed: UIKit.UIColor {
    get
  }
  public class var mossyGreen: UIKit.UIColor {
    get
  }
  public class var grape: UIKit.UIColor {
    get
  }
  public class var darkGrey: UIKit.UIColor {
    get
  }
  public class var brownishGrey: UIKit.UIColor {
    get
  }
  public class var orangeGradient: UIKit.UIColor {
    get
  }
}
public struct ShoppingListsRemoteDataSource : TiendeoCore.ShoppingListsDataSource {
  public init()
  public func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
}
public struct ShoppingListsLocalDataSource : TiendeoCore.ShoppingListsDataSource {
  public init()
  public func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func syncShoppingList(shopingList: TiendeoCore.ShoppingList, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public struct User {
  public let userId: Swift.String?
  public let email: Swift.String?
  public let name: Swift.String?
  public let picture: Swift.String?
  public let locale: Swift.String?
  public let accessToken: Swift.String?
  public let type: Swift.Int?
  public let socialId: Swift.String?
  public let externalId: Swift.String?
  public let phone: Swift.String?
  public let referrerHash: Swift.String?
  public let referredCode: Swift.String?
  public init(userId: Swift.String?, email: Swift.String?, name: Swift.String?, picture: Swift.String?, locale: Swift.String?, accessToken: Swift.String?, type: Swift.Int?, socialId: Swift.String?, externalId: Swift.String?, phone: Swift.String?, referrerHash: Swift.String?, referredCode: Swift.String?)
}
public struct TiendeoCountry {
  public let countryCode: Swift.String
  public let governorCountry: Swift.String
  public let sfCountryCode: Swift.String
  public let translationNameId: Swift.String
  public let countryName: Swift.String
  public let cityName: Swift.String
  public let defaultLat: Swift.Float
  public let defaultLon: Swift.Float
  public let flagUrl: Swift.String
  public init(countryCode: Swift.String, governorCountry: Swift.String, sfCountryCode: Swift.String, translationNameId: Swift.String, countryName: Swift.String, cityName: Swift.String, defaultLat: Swift.Float, defaultLon: Swift.Float, flagUrl: Swift.String)
}
public class CreateLoyaltyCard {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.CreateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  @objc deinit
}
public class CreateLoyaltyCardRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public class GetSavedTagBoxesByCountry {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetSavedTagBoxesByCountryRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetSavedTagBoxesByCountryRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class TagBoxesLocalDataSource : TiendeoCore.TagBoxesDataSource {
  public init()
  public func getTagBoxesByCatalogIdPaginated(requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesByCatalogId(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesByRetailerId(_ requestValues: TiendeoCore.GetSavedTagBoxesByRetailerIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesWithoutRetailerId(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func updateSavedTagBoxesRetailerId(with catalogs: [TiendeoCore.Catalog], countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteExpiredTagBoxes() -> RxSwift.Observable<Swift.Bool?>
  public func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func syncTagBoxes(tagboxes: [TiendeoCore.TagBox], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class GetSavedTagBoxesByRetailerId {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetSavedTagBoxesByRetailerIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetSavedTagBoxesByRetailerIdRequestValues {
  public var countryCode: Swift.String
  public init(retailerId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class GetCatalogsByStore {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByStoreRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public struct FiltersDataRepository : TiendeoCore.FiltersRepository {
  public init(localDataSource: TiendeoCore.FiltersDataSource, remoteDataSource: TiendeoCore.FiltersDataSource)
  public func getStaticFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
  public func getDynamicFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public protocol TiendeoCountriesDataSource {
  func getTiendeoCountries() -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  func getTiendeoCountryByCountryCode(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public protocol PixelsDataSource {
  func getPixels(requestValues: TiendeoCore.GetPixelsRequestValues) -> RxSwift.Observable<[TiendeoCore.Pixel]>
  func sendPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public enum TndColor : Swift.String {
  case red
  case red300
  case red400
  case red600
  case red700
  case turquoise
  case turquoise300
  case turquoise400
  case turquoise600
  case turquoise700
  case green
  case green300
  case green400
  case green600
  case green700
  case grey
  case grey300
  case grey400
  case grey600
  case grey700
  case black
  case white
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class TndColorStyles {
  public static func colorForStyle(_ style: TiendeoCore.TndColor) -> UIKit.UIColor
  public static func colorForStyle(_ style: Swift.String) -> UIKit.UIColor
  @objc deinit
}
public struct GeofencesRemoteDataSource : TiendeoCore.GeofencesDataSource {
  public init()
  public func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func saveGeofences(geofences: [TiendeoCore.Geofence]) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func getTriggeredGeofences() -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  public func deleteNonTriggeredGeofences() -> RxSwift.Observable<Swift.Bool>
  public func updateTriggeredGeofencesStatus() -> RxSwift.Observable<Swift.Bool>
}
public class GetStoresByCityAndRetailer {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoresByCityAndRetailerRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetStoresByCityAndRetailerRequestValues {
  public var countryCode: Swift.String
  public init(cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public protocol ArticleDataSource {
  func getRecommendedArticles(with getRecommendedArticlesByLatLonAndSearchWordRequestValues: TiendeoCore.GetRecommendedArticlesByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
}
public struct CoreConstants {
  public struct Provider {
    public static let tiendeo: Swift.String
    public static let tiendeoBundleIdentifier: Swift.String
  }
  public struct UserDefault {
    public static let lastCleanCacheTimestamp: Swift.String
  }
  public struct Stats {
    public struct LocationType {
      public static let real: Swift.String
      public static let selected: Swift.String
      public static let unknown: Swift.String
    }
    public struct ShopfullyLocationType {
      public static let real: Swift.String
      public static let selected: Swift.String
      public static let backoff: Swift.String
    }
    public static let undefined: Swift.String
    public static let platform: Swift.String
  }
  public struct PromoCoupon {
  }
  public struct CoreData {
  }
  public struct SearchCity {
    public static let noCity: Swift.String
  }
}
public enum StatsPageType : Swift.String {
  case home
  case search
  case storeDetail
  case catalogViewer
  case homeDeals
  case cardViewer
  case catalogsOnboarding
  case loginOnboarding
  case offersDetail
  case searchOffers
  case clipsShoppingList
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StatsSearchType : Swift.String {
  case favorite
  case explore
  case latest
  case category
  case retailer
  case product
  case brand
  case mall
  case deals
  case cardViewer
  case catalogsOnboarding
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StatsView : Swift.String {
  case result
  case story
  case recommender
  case lastPageRecommender
  case dealsList
  case articlesSlider
  case offersSearch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ProductsLocalDataSource : TiendeoCore.ProductsDataSource {
  public init()
  public func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
  public func getSavedProductsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateSavedProductsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class GetStaticFilters {
  public init(filtersRepository: TiendeoCore.FiltersRepository)
  public func execute(_ requestValues: TiendeoCore.GetFiltersRequestValues) -> RxSwift.Observable<[TiendeoCore.Filter]>
  @objc deinit
}
public class GetFiltersRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol ListCollectionViewCellProtocol : TiendeoCore.CollectionViewCellProtocol {
  func setupCell(with item: TiendeoCore.ListItem)
}
public struct GdprEntity {
  public let userToken: Swift.String?
  public let userKey: Swift.String?
  public let platform: Swift.String?
  public let provider: Swift.String?
  public let type: Swift.String?
  public let mail: Swift.String?
  public let complianceText: Swift.String?
  public let clientTimestamp: Swift.String?
  public let response: Swift.String?
  public init(userToken: Swift.String?, userKey: Swift.String?, platform: Swift.String?, provider: Swift.String?, type: Swift.String?, mail: Swift.String?, complianceText: Swift.String?, clientTimestamp: Swift.String?, response: Swift.String?)
}
public class GetPromoCouponsByTypeWithRetailers {
  public init(promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ requestValues: TiendeoCore.GetPromoCouponsByTypeWithRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  @objc deinit
}
public class GetPromoCouponsByTypeWithRetailersRequestValues {
  public var countryCode: Swift.String
  public init(type: TiendeoCore.PromoCouponType, countryCode: Swift.String, start: Swift.Int, count: Swift.Int, sort: Swift.String)
  @objc deinit
}
public class GetCatalogsByFilter {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByFilterRequestValues {
  public var countryCode: Swift.String
  public var filterRequest: TiendeoCore.FilterRequestParams
  public init(filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String)
  @objc deinit
}
public protocol ImageCacheProtocol {
  func resetImageCacheIfNeeded(newTimestamp: Swift.Double?, with repository: TiendeoCore.UserDefaultRepository)
  func resetImageCache()
}
extension TiendeoCore.ImageCacheProtocol {
  public func resetImageCacheIfNeeded(newTimestamp: Swift.Double?, with repository: TiendeoCore.UserDefaultRepository = UserDefaultRepository())
  public func resetImageCache()
}
public class GetFavorite {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.GetFavoriteRequestValues) -> RxSwift.Observable<TiendeoCore.Favorite?>
  @objc deinit
}
public class GetFavoriteRequestValues {
  public var countryCode: Swift.String
  final public let retailerId: Swift.String
  public init(countryCode: Swift.String, retailerId: Swift.String)
  @objc deinit
}
public class GetGlobalIntegrations {
  public init(configRepository: TiendeoCore.ConfigRepository)
  public func execute(_ requestValues: TiendeoCore.GetGlobalIntegrationsRequestValues) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper>
  @objc deinit
}
public class GetGlobalIntegrationsRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class SendStoreOpeningStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendStoreOpeningStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendStoreOpeningStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var storeStatsEntity: TiendeoCore.StoreStatsEntity
  public init(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity)
  @objc deinit
}
extension Foundation.Date {
  public func days(from date: Foundation.Date) -> Swift.Int
  public var localTime: Swift.String {
    get
  }
  public func resetTime() -> Foundation.Date
  public func stringFormatter() -> Swift.String
  public func transformToReadableString() -> Swift.String
  public func timeTo(date: Foundation.Date) -> Swift.String
  public func toUTC() -> Foundation.Date
  public func intervalInDays(fromDate date: Foundation.Date) -> Swift.Int
  public func addMonth(n: Swift.Int) -> Foundation.Date?
}
public class GeofencesDataRepository : TiendeoCore.GeofencesRepository {
  public init(remoteDataSource: TiendeoCore.GeofencesDataSource, localDataSource: TiendeoCore.GeofencesDataSource)
  public func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  @objc deinit
}
public struct AppUser {
  public let appUserId: Swift.String?
  public let userKey: Swift.String?
  public init(appUserId: Swift.String?, userKey: Swift.String?)
}
public struct StoreStatsEntity {
  public let storeId: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let userToken: Swift.String
  public let integration: Swift.String?
  public let version: Swift.String?
}
extension TiendeoCore.InputStatsEntity {
  public func transformToStoreStatsEntity(storeId: Swift.String) -> TiendeoCore.StoreStatsEntity
}
public class DeleteProductsInList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteProductsInListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class DeleteProductsInListRequestValues {
  public var countryCode: Swift.String
  public init(productsIds: [Swift.String], shoppingListId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func addTopShadow()
  @_Concurrency.MainActor(unsafe) public func addShadow(bottomShadow: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func deleteShadow()
  @_Concurrency.MainActor(unsafe) public func addConstrained(subview: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func mask(withRect maskRect: CoreFoundation.CGRect, cornerRadius: CoreFoundation.CGFloat, inverse: Swift.Bool = false)
}
public struct PromoCouponDataRepository : TiendeoCore.PromoCouponRepository {
  public init(remoteDataSource: TiendeoCore.PromoCouponDataSource)
  public func getPromoCouponById(requestValues: TiendeoCore.GetPromoCouponByIdRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  public func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String, start: Swift.Int, count: Swift.Int, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  public func getPromoCouponsTypeCashback(_ requestValues: TiendeoCore.GetPromoCouponsTypeCashbackRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  public func getPromoCouponUser(countryCode: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  public func addPromocouponUser(requestValues: TiendeoCore.AddPromoCouponUserRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  public func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  public func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
}
extension TiendeoCore.PrintStatBannerLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatBannerLocal>
  @objc @NSManaged dynamic public var bannerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var print: TiendeoCore.PrintStatLocal? {
    @objc get
    @objc set
  }
}
public struct ShoppingList {
  public let id: Swift.String
  public let name: Swift.String
  public var checked: Swift.Bool
  public var timestamp: Swift.Double
  public var products: [TiendeoCore.Product]
  public init(id: Swift.String, name: Swift.String, checked: Swift.Bool, products: [TiendeoCore.Product], timestamp: Swift.Double)
}
public protocol CatalogDisplayedRepository {
  func getCatalogsDisplayedExpired(daysToExpireCatalog: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CatalogDisplayed]>
  func saveCatalogsDisplayed(catalogs: [TiendeoCore.CatalogDisplayed]) -> RxSwift.Observable<Swift.Bool>
  func deleteAllCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func updateCatalogDisplayedOpenedStatus(_ requestValues: TiendeoCore.UpdateCatalogDisplayedOpenedStatusRequestValues) -> RxSwift.Observable<Swift.Bool>
}
public class DeleteAllLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteAllLoyaltyCardsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteAllLoyaltyCardsRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class GetPromoCouponRetailersByPromoCouponId {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetPromoCouponRetailersByPromoCouponIdRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  @objc deinit
}
public class GetPromoCouponRetailersByPromoCouponIdRequestValues {
  public var promoCouponId: Swift.String
  public var countryCode: Swift.String
  public init(promoCouponId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class GetSearchResultRequestValues {
  public var countryCode: Swift.String
  public init(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class GetLatestSearchResultRequestValues {
  public var countryCode: Swift.String
  public init(numberOfResults: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public struct RetailerViewEntity {
  public let retailerId: Swift.String
  public let name: Swift.String
  public let imageUrl: Swift.String?
  public let top: Swift.Int?
  public let isClient: Swift.Bool?
  public init(retailerId: Swift.String, name: Swift.String, imageUrl: Swift.String?, top: Swift.Int? = nil, isClient: Swift.Bool? = nil)
}
extension TiendeoCore.Retailer {
  public func transformToUI(staticUrl: Swift.String) -> TiendeoCore.RetailerViewEntity
}
extension TiendeoCore.PrintStatPromoCouponLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatPromoCouponLocal>
  @objc @NSManaged dynamic public var promoCouponId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var print: TiendeoCore.PrintStatLocal? {
    @objc get
    @objc set
  }
}
public protocol LoyaltyCardsRepository {
  func getLoyaltyCards(getLoyaltyCardsRequestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func syncLoyaltyCards(syncLoyaltyCardsRequestValues: TiendeoCore.SyncLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func createLoyaltyCard(requestValues: TiendeoCore.CreateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func updateLoyaltyCard(requestValues: TiendeoCore.UpdateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteLoyaltyCard(requestValues: TiendeoCore.DeleteLoyaltyCardByIdRequestValues) -> RxSwift.Observable<Swift.Bool>
  func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  func addPromoCouponUserWithLoyaltyCard(requestValues: TiendeoCore.AddPromoCouponUserWithLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
public struct StatsRemoteDataSource : TiendeoCore.StatsDataSource {
  public init()
  public func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogOpeningStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendBannerActionStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendBannerActiontStats(baseUrl: Swift.String, bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendLoginEventStats(_ requestValues: TiendeoCore.SendLoginEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  public func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  public func getSavedPrintStats() -> RxSwift.Observable<[TiendeoCore.PrintStatEntity]>
  public func deletePrintStats(with ids: [Swift.String]) -> RxSwift.Observable<Swift.Bool>
  public func sendSavedPrintStats(baseUrl: Swift.String, printStats: [TiendeoCore.PrintStatEntity]) -> RxSwift.Observable<[Swift.String : Swift.Bool?]>
}
public class GetLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  @objc deinit
}
public class GetLoyaltyCardsRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
extension TiendeoCore.PromoCouponRemoteDataSource {
  public func getPromoCouponUser(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  public func addPromocouponUser(requestValues: TiendeoCore.AddPromoCouponUserRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  public func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
}
public struct PrintsDuration {
  public typealias CatalogId = Swift.String
  public let data: [TiendeoCore.PrintsDuration.CatalogId : Foundation.TimeInterval]
  public init(data: [TiendeoCore.PrintsDuration.CatalogId : Foundation.TimeInterval])
}
public protocol ViewabilityProtocol {
  var collectionView: UIKit.UICollectionView! { get }
  associatedtype T
  func transformToPrintsDuration(views: [UIKit.UICollectionViewCell : Foundation.TimeInterval], in dataSource: Self.T) -> TiendeoCore.PrintsDuration
  func getCatalogId(with indexPath: Foundation.IndexPath, in dataSource: Self.T) -> Swift.String?
}
extension TiendeoCore.ViewabilityProtocol {
  public func transformToPrintsDuration(views: [UIKit.UICollectionViewCell : Foundation.TimeInterval], in dataSource: Self.T) -> TiendeoCore.PrintsDuration
}
public class FavoritesDataRepository : TiendeoCore.FavoritesRepository {
  public init(remoteDataSource: TiendeoCore.FavoritesDataSource, localDataSource: TiendeoCore.FavoritesDataSource)
  public func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func getFavorite(_ requestValues: TiendeoCore.GetFavoriteRequestValues) -> RxSwift.Observable<TiendeoCore.Favorite?>
  public func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func syncFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func migrateFavorites() -> RxSwift.Observable<Swift.Bool>
  public func resyncFavorites(_ requestValues: TiendeoCore.ResyncFavoritesRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public protocol CatalogDisplayedDataSource {
  func getCatalogsDisplayedExpired(daysToExpireCatalog: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CatalogDisplayed]>
  func saveCatalogsDisplayed(catalogs: [TiendeoCore.CatalogDisplayed]) -> RxSwift.Observable<Swift.Bool>
  func deleteCatalogsDisplayed30DaysAgo() -> RxSwift.Observable<Swift.Bool>
  func deleteAllCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func updateCatalogDisplayedOpenedStatus(_ requestValues: TiendeoCore.UpdateCatalogDisplayedOpenedStatusRequestValues) -> RxSwift.Observable<Swift.Bool>
}
extension TiendeoCore.LoyaltyCardsRemoteDataSource {
  public func syncLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
}
public protocol DealRepository {
  func getDeals(with filterRequest: TiendeoCore.FilterRequestParams, categoryIds: [Swift.String], sortBy: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Deal]>
  func getDealsCountByCategory(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.DealCount]>
}
public class UpdateCatalogDisplayedOpenedStatus {
  public init(catalogDisplayedRepository: TiendeoCore.CatalogDisplayedRepository)
  public func execute(_ requestValues: TiendeoCore.UpdateCatalogDisplayedOpenedStatusRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class UpdateCatalogDisplayedOpenedStatusRequestValues {
  public var countryCode: Swift.String
  public var catalogId: Swift.String
  public init(catalogId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class SyncLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.SyncLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  @objc deinit
}
public class SyncLoyaltyCardsRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public protocol ProductsDataSource {
  func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
  func getSavedProductsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.Product]>
  func updateSavedProductsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool?>
}
public struct SearchResultsDataRepository : TiendeoCore.SearchResultsRepository {
  public init(dataSources: [TiendeoCore.SearchResultsDataSource])
  public func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  public func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSearchProductResults(with searchNames: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSavedSearchProductResultsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func updateSavedSearchProductResultsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool>
}
public class AddProductToList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.AddProductToListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class AddProductToListRequestValues {
  public var countryCode: Swift.String
  public init(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String)
  @objc deinit
}
public class AddFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.AddFavoritesRequestValues) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  @objc deinit
}
public class AddFavoritesRequestValues {
  public var countryCode: Swift.String
  public init(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public enum PromoCouponType : Swift.Int {
  case print
  case gift
  case loyalty
  case cashback
  case cashbackSignUp
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct PromoTag {
  public let id: Swift.String
  public let type: TiendeoCore.PromoCouponType
  public let isSaved: Swift.Bool
  public init(id: Swift.String, type: TiendeoCore.PromoCouponType, isSaved: Swift.Bool)
}
public class GetTiendeoCountryByCountryCode {
  public init(tiendeoCountriesRepository: TiendeoCore.TiendeoCountriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetTiendeoCountryByCountryCodeRequestValues) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
  @objc deinit
}
public class GetTiendeoCountryByCountryCodeRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class GetCashbackRewards {
  public init(cashbackRewardsRepository: TiendeoCore.CashbackRewardsRepository)
  public func execute(_ params: TiendeoCore.GetCashbackRewardsRequestValues) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
  @objc deinit
}
public class GetCashbackRewardsRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public class DealDataRepository : TiendeoCore.DealRepository {
  public init(remoteDataSource: TiendeoCore.DealDataSource)
  public func getDeals(with filterRequest: TiendeoCore.FilterRequestParams, categoryIds: [Swift.String], sortBy: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Deal]>
  public func getDealsCountByCategory(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.DealCount]>
  @objc deinit
}
@available(*, deprecated, message: "Use FavoriteLocal instead")
public struct FavoriteLocalEntity {
  public var id: Swift.String
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let city: Swift.String
  public let catalogs: [Swift.String]
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let type: Swift.Int
  public let countryCode: Swift.String
}
extension TiendeoCore.FavoriteLocalEntity {
  public func transformToDomain() -> TiendeoCore.Favorite
  public static func map(dictionary: [Swift.String : Any]) -> TiendeoCore.FavoriteLocalEntity?
}
extension Swift.Sequence where Self.Element == TiendeoCore.FavoriteLocalEntity {
  public func transformToDomain() -> [TiendeoCore.Favorite]
}
public class GetStoresByMallId {
  public init(mallRepository: TiendeoCore.MallRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoresByMallIdRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetStoresByMallIdRequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public struct CategoryViewEntity {
  public let id: Swift.String?
  public let name: Swift.String?
  public let affinity: Swift.Int?
  public let top: Swift.Int?
  public init(id: Swift.String?, name: Swift.String?, affinity: Swift.Int?, top: Swift.Int?)
}
extension TiendeoCore.CategoryViewEntity {
  public func transformToDomain() -> TiendeoCore.TCategory
}
extension TiendeoCore.TCategory {
  public func transformToUI() -> TiendeoCore.CategoryViewEntity
}
public class GetCatalogsByLatLonAndSearchWord {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByLatLonAndSearchWordRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public class GetDefaultStore {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetDefaultStoreRequestValues) -> RxSwift.Observable<TiendeoCore.Store?>
  @objc deinit
}
public class GetDefaultStoreRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
extension TiendeoCore.FavoriteLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.FavoriteLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var city: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogs: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: TiendeoCore.CategoryLocal? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(FavoriteLocal) public class FavoriteLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DataController : ObjectiveC.NSObject {
  public static let shared: TiendeoCore.DataController
  @objc override dynamic public init()
  @objc deinit
}
public class GetPromoCouponById {
  public init(promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ requestValues: TiendeoCore.GetPromoCouponByIdRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  @objc deinit
}
public class GetPromoCouponByIdRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(promoTag: TiendeoCore.PromoTag, countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public class GetOffersByLatLonAndSearchWord {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetOffersByLatLonAndSearchWordRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, appUserId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData, useGroups: Swift.Bool = false)
  @objc deinit
}
public struct Banner {
  public let id: Swift.String
  public let imageUrl: Swift.String
  public let externalUrl: Swift.String
  public let event: Swift.String?
  public let target: Swift.String?
}
public class FavoriteCatalogDisplayedDataRepository : TiendeoCore.FavoriteCatalogDisplayedRepository {
  final public let localDataSource: TiendeoCore.FavoriteCatalogDisplayedDataSource
  public init(localDataSource: TiendeoCore.FavoriteCatalogDisplayedDataSource)
  public func saveFavoriteCatalogDisplayed(catalog: TiendeoCore.FavoriteCatalogDisplayed) -> RxSwift.Observable<Swift.Bool>
  public func getFavoriteCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.FavoriteCatalogDisplayed]>
  @objc deinit
}
public class GetTiendeoCountries {
  public init(tiendeoCountriesRepository: TiendeoCore.TiendeoCountriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetTiendeoContriesRequestValues = GetTiendeoContriesRequestValues()) -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  @objc deinit
}
public class GetTiendeoContriesRequestValues {
  public var countryCode: Swift.String
  public init()
  @objc deinit
}
public struct CatalogDisplayed {
  public let id: Swift.String
  public let displayedTimestamp: Swift.Double
  public let countryCode: Swift.String
}
public class AdsTrackingManager {
  public init()
  public func requestTrackingAuthorization(completion: @escaping () -> Swift.Void)
  public func getAdUserId() -> Swift.String
  @objc deinit
}
public struct PixelsRemoteDataSource : TiendeoCore.PixelsDataSource {
  public init()
  public func getPixels(requestValues: TiendeoCore.GetPixelsRequestValues) -> RxSwift.Observable<[TiendeoCore.Pixel]>
  public func sendPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public struct City {
  public let id: Swift.String
  public let name: Swift.String
  public let lat: Swift.Float
  public let lon: Swift.Float
  public init(id: Swift.String, name: Swift.String, lat: Swift.Float, lon: Swift.Float)
}
public protocol AppUserRepository {
  func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
@_hasMissingDesignatedInitializers public class ViewerProUserDefaultRepository {
  public class func getDefaultCity() -> TiendeoCore.City?
  public class func removeDefaultCity()
  public class func saveDefaultCity(city: TiendeoCore.City) -> Swift.Bool
  public class func getLastTimeShowedInterstitial() -> Swift.Double?
  public class func saveLastTimeShowedInterstitial(timeStamp: Swift.Double)
  public class func isAdsEnabled() -> Swift.Bool
  @objc deinit
}
public class GetSearchRetailersResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  @objc deinit
}
public struct BatchRequest {
  public let method: TiendeoCore.MethodRequest
  public let endPoint: Swift.String
  public let wrapperName: Swift.String
  public let headers: [Swift.String : Swift.String]?
  public let content: [Swift.String : Any]?
}
public struct MethodRequest {
  public let method: Swift.String
}
public struct CategoryItem {
  public let id: Swift.String
  public let name: Swift.String
  public let shortName: Swift.String?
  public let imageUrl: Swift.String
  public let url: Swift.String?
  public init(id: Swift.String, name: Swift.String, shortName: Swift.String?, imageUrl: Swift.String, url: Swift.String?)
}
extension Swift.Sequence where Self.Element == TiendeoCore.CategoryItem {
  public func transformToSearchResult() -> [TiendeoCore.SearchResult]
}
public class AddPromoCouponUser {
  public init(promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ params: TiendeoCore.AddPromoCouponUserRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  @objc deinit
}
public class AddPromoCouponUserRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public var promoCouponUser: TiendeoCore.PromoCouponUser
  public init(promoCouponUser: TiendeoCore.PromoCouponUser, countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public struct CashbackRewardsDataRepository : TiendeoCore.CashbackRewardsRepository {
  public init(remoteDataSource: TiendeoCore.CashbackRewardsDataSource)
  public func getCashbackRewards(with countryCode: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
}
public struct CityLocalEntity {
  public var id: Swift.String
  public var name: Swift.String
  public var lat: Swift.Float
  public var lon: Swift.Float
  public init(id: Swift.String, name: Swift.String, lat: Swift.Float, lon: Swift.Float)
  public static func map(dictionary: [Swift.String : Any]) -> TiendeoCore.CityLocalEntity?
  public func transformToDomain() -> TiendeoCore.City
}
extension TiendeoCore.City {
  public func transformToLocalEntity() -> TiendeoCore.CityLocalEntity?
}
public protocol ArticleRepository {
  func getRecommendedArticles(with getRecommendedArticlesByLatLonAndSearchWordRequestValues: TiendeoCore.GetRecommendedArticlesByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
}
public protocol StoresDataSource {
  func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.Store?>
}
public protocol FiltersRepository {
  func getStaticFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
  func getDynamicFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public struct ViewerProIntegration {
  public var defaultCityId: Swift.String
  public var defaultCityName: Swift.String
  public var defaultCityLat: Swift.Float
  public var defaultCityLon: Swift.Float
  public var showStoresDropDown: Swift.Bool
  public var retailerId: Swift.String
  public var clientPropertyId: Swift.String
  public var searchWord: Swift.String
  public var countryCode: Swift.String
  public var showLocationSelector: Swift.Bool
  public var showRecommenderInfo: Swift.Bool
  public var showProductTagPopup: Swift.Bool
  public var secondaryColorHex: Swift.String
  public var secondaryFontColorHex: Swift.String
  public var cornerRadius: Swift.Int
  public var showRetailerLabel: Swift.Bool
  public var showClipsButton: Swift.Bool
  public var showExpirationLabel: Swift.Bool
  public var showTitleLabel: Swift.Bool
  public var saveCatalogButton: Swift.Bool
  public var showShare: Swift.Bool
  public var showTagBoxes: Swift.Bool
  public var showStores: Swift.Bool
  public var showRecommenderBottomBar: Swift.Bool
  public var showPageSelector: Swift.Bool
  public var primaryColorHex: Swift.String
  public var primaryFontColorHex: Swift.String
  public var provider: Swift.String
  public var statsProvider: Swift.String
  public var tagButtonColorHex: Swift.String
  public var tagAreaColorHex: Swift.String
  public var adIntersticial: Swift.Bool
  public var adTimeBetweenIntersticial: Swift.Int
  public var adCatalogBottom: Swift.Bool
  public var showPromoCoupons: Swift.Bool
  public var expirationLabelText: Swift.Bool
  public var shouldShowPageAds: Swift.Bool
  public var adPagesPositions: [Swift.Int]
  public var shouldShowProductInfoChips: Swift.Bool
  public var showProductShareAndSaveBlock: Swift.Bool
  public var showProductOffersBlock: Swift.Bool
  public var showClipTutorial: Swift.Bool
  public var showMultitagbox: Swift.Bool
  public init(defaultCityId: Swift.String, defaultCityName: Swift.String, defaultCityLat: Swift.Float, defaultCityLon: Swift.Float, showStoresDropDown: Swift.Bool, retailerId: Swift.String, clientPropertyId: Swift.String, searchWord: Swift.String, countryCode: Swift.String, showLocationSelector: Swift.Bool, showRecommenderInfo: Swift.Bool, showProductTagPopup: Swift.Bool, secondaryColorHex: Swift.String, secondaryFontColorHex: Swift.String, cornerRadius: Swift.Int, showRetailerLabel: Swift.Bool, showClipsButton: Swift.Bool, showExpirationLabel: Swift.Bool, showTitleLabel: Swift.Bool, saveCatalogButton: Swift.Bool, showShare: Swift.Bool, showTagBoxes: Swift.Bool, showStores: Swift.Bool, showRecommenderBottomBar: Swift.Bool, showPageSelector: Swift.Bool, primaryColorHex: Swift.String, primaryFontColorHex: Swift.String, provider: Swift.String, statsProvider: Swift.String, tagButtonColorHex: Swift.String, tagAreaColorHex: Swift.String, adIntersticial: Swift.Bool, adTimeBetweenIntersticial: Swift.Int, adCatalogBottom: Swift.Bool, showPromoCoupons: Swift.Bool, expirationLabelText: Swift.Bool, shouldShowPageAds: Swift.Bool, adPagesPositions: [Swift.Int], shouldShowProductInfoChips: Swift.Bool, showProductShareAndSaveBlock: Swift.Bool, showProductOffersBlock: Swift.Bool, showClipTutorial: Swift.Bool, showMultitagbox: Swift.Bool)
}
public class UpdateReferredCode {
  public init(referrersRepository: TiendeoCore.ReferrersRepository)
  public func execute(_ params: TiendeoCore.UpdateReferredCodeRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class UpdateReferredCodeRequestValues : TiendeoCore.BaseRequestValues {
  public init(referredCode: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(LoyaltyCardLocal) public class LoyaltyCardLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol PromoCouponRepository {
  func getPromoCouponById(requestValues: TiendeoCore.GetPromoCouponByIdRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String, start: Swift.Int, count: Swift.Int, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  func getPromoCouponsTypeCashback(_ requestValues: TiendeoCore.GetPromoCouponsTypeCashbackRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  func getPromoCouponUser(countryCode: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func addPromocouponUser(requestValues: TiendeoCore.AddPromoCouponUserRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
}
public class GetOffersByCityAndSearchWord {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetOffersByCityAndSearchWordRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
extension Foundation.Bundle {
  public class var versionNumber: Swift.String {
    get
  }
  public class var buildNumber: Swift.String {
    get
  }
}
public class GetDealsCountByCategory {
  public init(dealRepository: TiendeoCore.DealRepository)
  public func execute(_ requestValues: TiendeoCore.GetDealsCountByCategoryRequestValues) -> RxSwift.Observable<[TiendeoCore.DealCount]>
  @objc deinit
}
public class GetDealsCountByCategoryRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct CatalogsListSectionInfo {
  public let type: TiendeoCore.CatalogsListSectionType
  public let searchWord: Swift.String
  public init(type: TiendeoCore.CatalogsListSectionType, searchWord: Swift.String = "")
}
public enum CatalogsListSectionType {
  case catalogs
  case catalogsRecommended
  case mallBanner
  case favoriteBanner
  case adBanner
  case customBanner
  case favoritesSlider
  case retailersBanner
  case storiesSlider
  case locationBanner
  case loginBanner
  case dealsSection
  case cashbackSection
  case catalogsSlider
  case articlesSlider
  case retailerCatalogsSlider
  public static func == (a: TiendeoCore.CatalogsListSectionType, b: TiendeoCore.CatalogsListSectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatalogsListSection : TiendeoCore.ListSection {
  public var headerItem: TiendeoCore.ListItem?
  public var cellItems: [TiendeoCore.ListItem]
  public var footerItem: TiendeoCore.ListItem?
  public var type: TiendeoCore.CatalogsListSectionType
  public init(headerItem: TiendeoCore.ListItem? = nil, cellItems: [TiendeoCore.ListItem], footerItem: TiendeoCore.ListItem? = nil, type: TiendeoCore.CatalogsListSectionType)
}
public protocol VisibilityInspectorProtocol {
  var visibilityInspector: TiendeoCore.VisibilityInspector? { get }
  func setupVisibilityInspector()
  func configureVisibilityInspector(collectionView: UIKit.UICollectionView, onDispatch: @escaping (([UIKit.UICollectionViewCell : Foundation.TimeInterval]) -> Swift.Void)) -> TiendeoCore.VisibilityInspector?
}
extension TiendeoCore.VisibilityInspectorProtocol {
  public func configureVisibilityInspector(collectionView: UIKit.UICollectionView, onDispatch: @escaping (([UIKit.UICollectionViewCell : Foundation.TimeInterval]) -> Swift.Void)) -> TiendeoCore.VisibilityInspector?
}
public class SendLoginEventStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendLoginEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendLoginEventStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var statsEntity: TiendeoCore.LoginEventStatsEntity
  public init(baseUrl: Swift.String, statsEntity: TiendeoCore.LoginEventStatsEntity)
  @objc deinit
}
public class GetLatestSearchLoyaltyCardsResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLatestSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class GetPromocouponRetailersByIds {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetPromocouponRetailersByIdsRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  @objc deinit
}
public class GetPromocouponRetailersByIdsRequestValues {
  public var countryCode: Swift.String
  public var retailersIds: [Swift.String]
  public init(countryCode: Swift.String, retailersIds: [Swift.String])
  @objc deinit
}
public protocol FavoritesRepository {
  func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func getFavorite(_ requestValues: TiendeoCore.GetFavoriteRequestValues) -> RxSwift.Observable<TiendeoCore.Favorite?>
  func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func syncFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func migrateFavorites() -> RxSwift.Observable<Swift.Bool>
  func resyncFavorites(_ requestValues: TiendeoCore.ResyncFavoritesRequestValues) -> RxSwift.Observable<Swift.Bool>
}
public class GetSavedTagBoxesByCatalogId {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetSavedTagBoxesByCatalogIdRequestValues {
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PrintStatArticleLocal) public class PrintStatArticleLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct StoreDetail {
  public let storeId: Swift.String
  public let name: Swift.String?
  public let retailer: TiendeoCore.Retailer?
  public let mall: TiendeoCore.Mall?
  public let address: Swift.String?
  public let postalCode: Swift.String?
  public let town: Swift.String?
  public let province: Swift.String?
  public let web: Swift.String?
  public let phone: Swift.String?
  public let lat: Swift.Float?
  public let lon: Swift.Float?
  public let distance: Swift.Float?
  public let description: Swift.String?
  public let horariosSemana: [Swift.String]?
  public let catalogs: [TiendeoCore.Catalog]?
  public let withCatalogs: Swift.Bool
  public init(storeId: Swift.String, name: Swift.String?, retailer: TiendeoCore.Retailer?, mall: TiendeoCore.Mall?, address: Swift.String?, postalCode: Swift.String?, town: Swift.String?, province: Swift.String?, web: Swift.String?, phone: Swift.String?, lat: Swift.Float?, lon: Swift.Float?, distance: Swift.Float?, description: Swift.String?, horariosSemana: [Swift.String]?, catalogs: [TiendeoCore.Catalog]?, withCatalogs: Swift.Bool)
  public func fullAddress() -> Swift.String
  public func mallAndFullAddress() -> Foundation.NSAttributedString
  public func hasSchedules() -> Swift.Bool
  public func scheduleString() -> Swift.String
  public func fullDescription() -> Swift.String
  public func hasPhoneNumber() -> Swift.Bool
  public func phoneNumber() -> Swift.String
  public func hasWebPage() -> Swift.Bool
  public func webPage() -> Swift.String
}
public struct Article {
  public let type: TiendeoCore.OfferType
  public let items: [TiendeoCore.ArticleItem]?
  public let articleName: Swift.String?
  public let brandName: Swift.String?
  public let description: Swift.String?
  public let price: Swift.String?
  public let oldPrice: Swift.String?
  public let promo: Swift.String?
  public let infoPrice: Swift.String?
  public let catalogId: Swift.String
  public let shopfullyId: Swift.String?
  public let catalogTitle: Swift.String?
  public let categoryId: Swift.String?
  public let page: Swift.Int
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let retailerLogo: Swift.String
  public let image: Swift.String
  public let images: [Swift.String]?
  public let expiresIn: Swift.String
  public let endPublication: Foundation.Date
  public let id: Swift.String
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let daysToExpire: Swift.Int
  public let daysSincePublication: Swift.Int
  public let catalogIsDynamic: Swift.Bool
  public let catalogExternalUrl: Swift.String?
  public let modelName: Swift.String?
  public var isSaved: Swift.Bool?
  public var imageWith: Swift.Int?
  public var imageHeight: Swift.Int?
  public var discountCode: Swift.String?
  public var freeShipping: Swift.Bool?
  public var shippingCosts: Swift.String?
  public var affinity: Swift.Int?
}
extension TiendeoCore.GeofenceLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.GeofenceLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var radius: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggersAgain: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var start: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var end: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var action: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deeplink: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggeredDate: Foundation.Date? {
    @objc get
    @objc set
  }
}
public class GetDealsWithStatus {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetDealsWithStatusRequestValues) -> RxSwift.Observable<[TiendeoCore.Deal]>
  @objc deinit
}
public class GetDealsWithStatusRequestValues {
  public var countryCode: Swift.String
  public init(dealsObservable: RxSwift.Observable<[TiendeoCore.Deal]>, countryCode: Swift.String)
  @objc deinit
}
public class SendCatalogOpeningStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendCatalogOpeningStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendCatalogOpeningStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var openingStatsEntity: TiendeoCore.OpeningStatsEntity
  public init(baseUrl: Swift.String, openingStats: TiendeoCore.OpeningStatsEntity)
  @objc deinit
}
public class DeleteFavoriteById {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteFavoriteByIdRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteFavoriteByIdRequestValues {
  public var countryCode: Swift.String
  public init(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct OpeningStatsEntity {
  public let catalogId: Swift.String
  public let modelName: Swift.String?
  public let searchWord: Swift.String?
  public let searchType: Swift.String?
  public let searchCity: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String?
  public let position: Swift.Int?
  public let latitude: Swift.Float?
  public let longitude: Swift.Float?
  public let selectedLatitude: Swift.Float?
  public let selectedLongitude: Swift.Float?
  public let locationType: Swift.String?
  public let view: Swift.String?
  public let origin: Swift.String?
  public let integration: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let openingHash: Swift.String
  public let platform: Swift.String
  public let retailerId: Swift.String
  public let adUserId: Swift.String
  public let provider: Swift.String?
  public let sessionId: Swift.String?
  public init(catalogId: Swift.String, modelName: Swift.String?, searchWord: Swift.String?, searchType: Swift.String?, searchCity: Swift.String?, pageType: Swift.String?, userToken: Swift.String, version: Swift.String?, position: Swift.Int?, latitude: Swift.Float?, longitude: Swift.Float?, selectedLatitude: Swift.Float?, selectedLongitude: Swift.Float?, locationType: Swift.String?, view: Swift.String?, origin: Swift.String?, integration: Swift.String, clientTimeStamp: Swift.String, openingHash: Swift.String, retailerId: Swift.String, adUserId: Swift.String, provider: Swift.String?, sessionId: Swift.String?)
}
extension TiendeoCore.InputStatsEntity {
  public func transformToOpeningStatsEntity(catalogId: Swift.String, modelName: Swift.String?, userDefaultCity: TiendeoCore.City?, retailerId: Swift.String, integration: Swift.String, positionInList: Swift.Int, date: Swift.String = Date().stringFormatter()) -> TiendeoCore.OpeningStatsEntity
}
public struct UserDataRepository : TiendeoCore.UserRepository {
  public init(remoteDataSource: TiendeoCore.UserDataSource)
  public func getUser() -> RxSwift.Observable<TiendeoCore.User>
}
@objc public class StoreViewEntity : ObjectiveC.NSObject {
  final public let storeId: Swift.String
  final public let name: Swift.String?
  final public let address: Swift.String?
  final public let lat: Swift.Float
  final public let lon: Swift.Float
  final public let distance: Swift.Float?
  final public let phone: Swift.String?
  final public let retailer: TiendeoCore.RetailerViewEntity?
  public var schedulesStrings: [Swift.String]?
  final public let postcode: Swift.String?
  final public let city: Swift.String?
  final public let withCatalogs: Swift.Bool
  public static var selectedParams: Swift.String
  public init(storeId: Swift.String, name: Swift.String?, address: Swift.String?, lat: Swift.Float, lon: Swift.Float, distance: Swift.Float?, phone: Swift.String?, retailer: TiendeoCore.RetailerViewEntity?, schedulesStrings: [Swift.String]?, postcode: Swift.String?, city: Swift.String?, withCatalogs: Swift.Bool)
  public func transformToDomain() -> TiendeoCore.Store
  public func formattedDistance() -> Swift.String
  public func logoUrl(staticUrl: Swift.String) -> Swift.String
  @objc deinit
}
extension TiendeoCore.StoreViewEntity : MapKit.MKAnnotation {
  @objc dynamic public var coordinate: CoreLocation.CLLocationCoordinate2D {
    @objc get
  }
  @objc dynamic public var title: Swift.String? {
    @objc get
  }
  @objc dynamic public var subtitle: Swift.String? {
    @objc get
  }
}
extension TiendeoCore.Store {
  public func transformToUI(staticUrl: Swift.String) -> TiendeoCore.StoreViewEntity?
}
public class GetRecommendedCatalogs {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetRecommendedCatalogsRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public class TicketDataRepository : TiendeoCore.TicketRepository {
  public init(remoteDataSource: TiendeoCore.TicketDataSource)
  public func sendTicket(promoCoupons: [TiendeoCore.PromoCoupon], images: [Foundation.Data], userId: Swift.String, countryCode: Swift.String, referrerHash: Swift.String?, isLogged: Swift.Bool) -> RxSwift.Observable<TiendeoCore.Ticket>
  public func getTickets(counytryCode: Swift.String, days: Swift.Int?, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.Ticket]>
  @objc deinit
}
public struct UserNotification {
  public let id: Swift.String?
  public let userId: Swift.String?
  public let notificationId: Swift.String
  public let created: Swift.String?
  public let viewed: Swift.String?
  public let domain: TiendeoCore.UserNotificationDomain
  public let type: TiendeoCore.UserNotificationType
  public let info: TiendeoCore.UserNotificationInfo?
  public init(id: Swift.String?, userId: Swift.String?, notificationId: Swift.String, created: Swift.String?, viewed: Swift.String?, domain: TiendeoCore.UserNotificationDomain, type: TiendeoCore.UserNotificationType, info: TiendeoCore.UserNotificationInfo?)
}
public protocol CashbackRewardsDataSource {
  func getCashbackRewardsLogged(with countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
  func getCashbackRewards(with countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
}
public protocol MallDataSource {
  func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
}
extension Swift.Float {
  public func formattedDistance() -> Swift.String
}
public struct PrintStatBannerEntity {
  public var bannerId: Swift.String
  public init(bannerId: Swift.String)
}
public struct ReadingStatsEntity {
  public let catalogId: Swift.String
  public let pageNumber: Swift.Int
  public let timeWithZoom: Swift.Double
  public let timeWithoutZoom: Swift.Double
  public let searchType: Swift.String?
  public let searchWord: Swift.String?
  public let searchCity: Swift.String?
  public let pageType: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let version: Swift.String?
  public let integration: Swift.String
  public let userToken: Swift.String
  public let openingHash: Swift.String?
  public let view: Swift.String?
  public let origin: Swift.String?
  public let adUserId: Swift.String
  public let provider: Swift.String?
  public let endAction: Swift.String?
  public init(catalogId: Swift.String, pageNumber: Swift.Int, timeWithZoom: Swift.Double, timeWithoutZoom: Swift.Double, version: Swift.String?, integration: Swift.String, userToken: Swift.String, openingHash: Swift.String?, searchType: Swift.String?, searchWord: Swift.String?, pageType: Swift.String?, view: Swift.String?, origin: Swift.String?, adUserId: Swift.String, searchCity: Swift.String?, provider: Swift.String?, endAction: Swift.String?)
}
extension TiendeoCore.InputStatsEntity {
  public func transformToReadingStatsEntity(catalogId: Swift.String, page: Swift.Int, zoomTime: Swift.Double, noZoomTime: Swift.Double, integration: Swift.String, endAction: TiendeoCore.ReadingEndAction) -> TiendeoCore.ReadingStatsEntity
}
public enum ReadingEndAction : Swift.String {
  case swipePage
  case switchPage
  case closeViewer
  case openSwipeRecommender
  case openRecommender
  case openStoreSelector
  case openShareCatalog
  case openProductDetails
  case openPromoCoupon
  case appInBackground
  case openPageSelector
  case openHowToClip
  case swipeCatalog
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ViewabilityConfig {
  public let viewabilityEnabled: Swift.Bool
  public let minimumRequiredVisibilePercentage: Swift.Double
  public let minimumRequiredTime: Swift.Int
  public init(viewabilityEnabled: Swift.Bool, minimumRequiredVisibilePercentage: Swift.Double, minimumRequiredTime: Swift.Int)
}
extension TiendeoCore.ViewabilityConfig : TiendeoCore.ViewabilityConfiguration {
}
extension TiendeoCore.ViewabilityConfig {
  public static var defaultConfiguration: TiendeoCore.ViewabilityConfiguration {
    get
  }
}
public enum CatalogsListItemType {
  case header
  case catalog
  case coupon
  case adBanner
  case favoriteBanner
  case mallBanner
  case favoritesSlider
  case storiesSlider
  case customBanner
  case retailersBanner
  case locationBanner
  case loginBanner
  case catalogsSlider
  case articlesSlider
  case retailerCatalogsSlider
  public static func == (a: TiendeoCore.CatalogsListItemType, b: TiendeoCore.CatalogsListItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CatalogsListItem : TiendeoCore.ListItem {
  var type: TiendeoCore.CatalogsListItemType { get set }
}
public class GetTickets {
  public init(ticketRepository: TiendeoCore.TicketRepository)
  public func execute(_ params: TiendeoCore.GetTicketsRequestValues) -> RxSwift.Observable<[TiendeoCore.Ticket]>
  @objc deinit
}
public class GetTicketsRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public var days: Swift.Int?
  public init(countryCode: Swift.String, days: Swift.Int? = nil, isLogged: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ProductLocal) public class ProductLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class SetNotificationsViewed {
  public init(notificationRepository: TiendeoCore.NotificationRepository)
  public func execute(_ requestValues: TiendeoCore.SetNotificationsRequestValues) -> RxSwift.Observable<Swift.Void>
  @objc deinit
}
public class SetNotificationsRequestValues : TiendeoCore.BaseRequestValues {
  public init()
  @objc deinit
}
public class GetCategories {
  public init(categoriesRepository: TiendeoCore.CategoriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCategoriesRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  @objc deinit
}
public class GetCategoriesRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct ArticleClipEventStatsEntity {
  public let eventName: Swift.String?
  public let action: Swift.String?
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let catalogId: Swift.String?
  public let pageNumber: Swift.Int?
  public let searchWord: Swift.String?
  public let searchType: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String
  public let integration: Swift.String?
  public let provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let origin: Swift.String?
  public let articleId: Swift.String?
  public let searchCity: Swift.String?
  public init(eventName: Swift.String?, action: Swift.String?, productId: Swift.String?, brandId: Swift.String?, catalogId: Swift.String?, pageNumber: Swift.Int?, searchWord: Swift.String?, searchType: Swift.String?, pageType: Swift.String?, userToken: Swift.String, version: Swift.String, integration: Swift.String?, provider: Swift.String?, clientTimeStamp: Swift.String, timeZoneOffset: Swift.Int, platform: Swift.String, origin: Swift.String?, articleId: Swift.String?, searchCity: Swift.String?)
}
extension TiendeoCore.InputStatsEntity {
  public func transformToArticleClipEventStatsEntity() -> TiendeoCore.ArticleClipEventStatsEntity
}
public protocol TicketRepository {
  func sendTicket(promoCoupons: [TiendeoCore.PromoCoupon], images: [Foundation.Data], userId: Swift.String, countryCode: Swift.String, referrerHash: Swift.String?, isLogged: Swift.Bool) -> RxSwift.Observable<TiendeoCore.Ticket>
  func getTickets(counytryCode: Swift.String, days: Swift.Int?, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.Ticket]>
}
public protocol NotificationDataSource {
  func getNotifications(countryCode: Swift.String, start: Swift.Int, count: Swift.Int, domain: TiendeoCore.UserNotificationDomain) -> RxSwift.Observable<[TiendeoCore.UserNotification]>
  func setNotificationsViewed() -> RxSwift.Observable<Swift.Void>
}
public class DeleteTagBox {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteTagBoxRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class DeleteTagBoxRequestValues {
  public var countryCode: Swift.String
  public init(tagBoxId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PrivacyPolicyView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func loadView() -> TiendeoCore.PrivacyPolicyView?
  @_Concurrency.MainActor(unsafe) public func calculateHeight(with containerWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class UserDefaultRepository : TiendeoCore.KeyValueRepository {
  public init()
  public class func saveObject(key: Swift.String, value: Any)
  public func saveObject(key: Swift.String, value: Any)
  public class func loadObject(key: Swift.String) -> Any?
  public func loadObject(key: Swift.String) -> Any?
  public class func loadString(key: Swift.String) -> Swift.String?
  public func loadString(key: Swift.String) -> Swift.String?
  public class func saveBoolean(key: Swift.String, value: Swift.Bool)
  public func saveBoolean(key: Swift.String, value: Swift.Bool)
  public class func loadBoolean(key: Swift.String) -> Swift.Bool?
  public func loadBoolean(key: Swift.String) -> Swift.Bool?
  public class func remove(key: Swift.String)
  public func remove(key: Swift.String)
  public class func resetUserDefaultIfNeeded()
  public func resetDefaults()
  @objc deinit
}
public protocol KeyValueRepository {
  static func saveObject(key: Swift.String, value: Any)
  static func loadString(key: Swift.String) -> Swift.String?
  static func resetUserDefaultIfNeeded()
  static func saveBoolean(key: Swift.String, value: Swift.Bool)
  static func loadBoolean(key: Swift.String) -> Swift.Bool?
  static func remove(key: Swift.String)
}
extension Swift.String {
  public func isValidEmail() -> Swift.Bool
  public func isValidPhone() -> Swift.Bool
  public func onlyDigits() -> Swift.String
  public func formatSearchInput() -> Swift.String
  public func height(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func width(withConstrainedHeight height: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func isValidUrl() -> Swift.Bool
  public func stringByAddingPercentEncodingForTiendeo() -> Swift.String
  public func withBoldText(boldPartsOfString: [Swift.String], font: UIKit.UIFont, boldFont: UIKit.UIFont) -> Foundation.NSAttributedString
  public func formatForRequest() -> Swift.String
  public func addingPercentEncodingForTiendeo() -> Swift.String
  public func capitalizingFirstLetter() -> Swift.String
  public func transformToDate(_ entityName: Swift.String = "", entityId: Swift.String = "", entityProperty: Swift.String = "") -> Foundation.Date?
  public func urlQueryEncoding() -> Swift.String?
  public func transformToUndefinedIfNeeded() -> Swift.String
  public func transformToReadableDateString() -> Swift.String
  public func toDouble() -> Swift.Double?
  public func toArrayOfInt() -> [Swift.Int]
  public func toArrayOfString() -> [Swift.String]
  public func formatForSorting() -> Swift.String
  public func addShowExpiredsQueryParam(show: Swift.Bool) -> Swift.String
}
extension Swift.Optional where Wrapped == Swift.String {
  public func transformToStatsFormat() -> Swift.String
}
public struct StoresDataRepository : TiendeoCore.StoresRepository {
  public init(remoteDataSource: TiendeoCore.StoresDataSource, localDataSource: TiendeoCore.StoresDataSource)
  public func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  public func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.Store>
}
public struct StatsLocalDataSource : TiendeoCore.StatsDataSource {
  public init()
  public func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogOpeningStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendBannerActiontStats(baseUrl: Swift.String, bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendLoginEventStats(_ requestValues: TiendeoCore.SendLoginEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  public func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  public func getSavedPrintStats() -> RxSwift.Observable<[TiendeoCore.PrintStatEntity]>
  public func deletePrintStats(with ids: [Swift.String]) -> RxSwift.Observable<Swift.Bool>
  public func sendSavedPrintStats(baseUrl: Swift.String, printStats: [TiendeoCore.PrintStatEntity]) -> RxSwift.Observable<[Swift.String : Swift.Bool?]>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CouponListCollectionViewCell : TiendeoCore.ContentListCollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) override public func setupCell(with item: TiendeoCore.ListItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class GetCatalogById {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog>
  @objc deinit
}
public class GetCatalogRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public class ArticleRemoteDataSource : TiendeoCore.ArticleDataSource {
  public init()
  public func getRecommendedArticles(with getRecommendedArticlesByLatLonAndSearchWordRequestValues: TiendeoCore.GetRecommendedArticlesByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public protocol UserDataSource {
  func getUser() -> RxSwift.Observable<TiendeoCore.User>
}
public class SavePrintStat {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SavePrintStatRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SavePrintStatRequestValues : TiendeoCore.BaseRequestValues {
  public var printStatEntity: TiendeoCore.PrintStatEntity
  public init(printStatEntity: TiendeoCore.PrintStatEntity)
  @objc deinit
}
public protocol ViewabilityConfiguration {
  var viewabilityEnabled: Swift.Bool { get }
  var minimumRequiredVisibilePercentage: Swift.Double { get }
  var minimumRequiredTime: Swift.Int { get }
}
public enum VisibilityInspectorBuilder {
  public static func viewabilityInspector(for collectionView: UIKit.UICollectionView, dispatcher: TiendeoCore.TargetDispatcher? = nil, configuration: (TiendeoCore.ViewabilityConfiguration)? = ViewabilityConfig.defaultConfiguration, onDispatch: (([UIKit.UIView : Foundation.TimeInterval]) -> Swift.Void)? = nil) -> TiendeoCore.VisibilityInspector?
}
extension TiendeoCore.VisibilityInspectorBuilder {
  public static var configuration: TiendeoCore.ViewabilityConfiguration
}
public struct Ticket {
  public let id: Swift.String
  public let userId: Swift.String
  public let country: Swift.String
  public let ticketNumber: Swift.String?
  public let ticketDate: Foundation.Date?
  public let retailerId: Swift.String?
  public let retailerDescription: Swift.String?
  public let status: Swift.String
  public let promoCoupons: [Any]
  public let images: [Swift.String]
  public let creationDate: Foundation.Date?
  public init(id: Swift.String, userId: Swift.String, country: Swift.String, ticketNumber: Swift.String?, ticketDate: Foundation.Date?, retailerId: Swift.String?, retailerDescription: Swift.String?, status: Swift.String, promoCoupons: [Any], images: [Swift.String], creationDate: Foundation.Date?)
}
@_inheritsConvenienceInitializers @objc(PrintStatPromoCouponLocal) public class PrintStatPromoCouponLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct AppData {
  public let appName: Swift.String
  public let manufacturers: Swift.Bool
  public let provider: Swift.String
  public let showExpiredCatalogs: Swift.Bool
  public init(appName: Swift.String, manufacturers: Swift.Bool, provider: Swift.String, showExpiredCatalogs: Swift.Bool)
}
public protocol ReferrersDataSource {
  func getReferrerInfoLogged(with countryCode: Swift.String, referrerHash: Swift.String) -> RxSwift.Observable<TiendeoCore.ReferrerInfo?>
  func getReferrerInfo(with countryCode: Swift.String, referrerHash: Swift.String) -> RxSwift.Observable<TiendeoCore.ReferrerInfo?>
  func updateReferredCode(_ referredCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public protocol CitiesDataSource {
  func getCity(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.City?>
}
public struct Mall {
  public var mallId: Swift.String
  public var name: Swift.String?
  public var affinity: Swift.Int?
  public var top: Swift.Int?
  public init(mallId: Swift.String, name: Swift.String?, affinity: Swift.Int?, top: Swift.Int?)
}
public struct ArticleItem {
  public let name: Swift.String
  public let page: Swift.Int
  public let productId: Swift.String
}
public class GetDealsByFilter {
  public init(dealRepository: TiendeoCore.DealRepository)
  public func execute(_ requestValues: TiendeoCore.GetDealsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Deal]>
  @objc deinit
}
public class GetDealsByFilterRequestValues {
  public var countryCode: Swift.String
  public var filterRequest: TiendeoCore.FilterRequestParams
  public var categoryIds: [Swift.String]
  public var sortBy: Swift.String
  public init(filterRequest: TiendeoCore.FilterRequestParams, categoryIds: [Swift.String], sortBy: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class SendArticleBuyStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendArticleBuyStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendArticleBuyStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var articleStatsEntity: TiendeoCore.ArticleStatsEntity
  public init(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity)
  @objc deinit
}
public class MigrateFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.MigrateFavoritesRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class MigrateFavoritesRequestValues : TiendeoCore.BaseRequestValues {
  public init()
  @objc deinit
}
public class SaveDefaultStore {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.SaveDefaultStoreRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SaveDefaultStoreRequestValues {
  public var countryCode: Swift.String
  public init(store: TiendeoCore.Store, countryCode: Swift.String)
  @objc deinit
}
public struct CouponViewEntity {
  public let couponId: Swift.String
  public let catalogId: Swift.String
  public let shortText: Swift.String
  public let hasImage: Swift.Bool
  public let type: TiendeoCore.CouponType
  public let color: Swift.String
  public let imageUrl: Swift.String
  public let externalUrl: Swift.String
  public func typeText() -> Swift.String
  public func getCouponPrimaryColor() -> UIKit.UIColor
  public func getCouponSecondaryColor() -> UIKit.UIColor
}
extension TiendeoCore.Coupon {
  public func transformToUI(imageTemplate: Swift.String, pathWeb: Swift.String, pathCoupons: Swift.String, provider: Swift.String) -> TiendeoCore.CouponViewEntity
}
public class NotificationDataRepository : TiendeoCore.NotificationRepository {
  public init(remoteDataSource: TiendeoCore.NotificationDataSource)
  public func getNotifications(countryCode: Swift.String, start: Swift.Int, count: Swift.Int, domain: TiendeoCore.UserNotificationDomain) -> RxSwift.Observable<[TiendeoCore.UserNotification]>
  public func setNotificationsViewed() -> RxSwift.Observable<Swift.Void>
  @objc deinit
}
public class ResyncFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.ResyncFavoritesRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class ResyncFavoritesRequestValues : TiendeoCore.BaseRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
extension TiendeoCore.CatalogDisplayedLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.CatalogDisplayedLocal>
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayedTimestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var opened: Swift.Bool {
    @objc get
    @objc set
  }
}
public class SendOpenAppStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendOpenAppStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendOpenAppStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var openAppStatsEntity: TiendeoCore.OpenAppStatsEntity
  public init(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity)
  @objc deinit
}
public struct ProductOffers {
  public let name: Swift.String
  public let offers: Swift.Int
  public init(name: Swift.String, offers: Swift.Int)
}
public class GetSearchLoyaltyCardsResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  @objc deinit
}
public enum OfferType : Swift.Int {
  case tagbox
  case sale
  case tagPage
  case catalogPage
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum OfferStatsType : Swift.String {
  case article
  case sale
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension TiendeoCore.OfferType : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
}
extension TiendeoCore.PrintStatArticleLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatArticleLocal>
  @objc @NSManaged dynamic public var articleId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modelName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var saleId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var print: TiendeoCore.PrintStatLocal? {
    @objc get
    @objc set
  }
}
public class AddSearchResult {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.AddSearchResultRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class AddSearchResultRequestValues {
  public var countryCode: Swift.String
  public init(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String)
  @objc deinit
}
public struct CitiesRemoteDataSource : TiendeoCore.CitiesDataSource {
  public init()
  public func getCity(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.City?>
}
public struct CatalogDataRepository : TiendeoCore.CatalogRepository {
  public init(dataSources: [TiendeoCore.CatalogDataSource])
  public func getCatalogs(requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogById(requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog>
  public func getCatalogsByIds(catalogIds: [Swift.String], countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRelatedCatalogs(requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRecommendedCatalogs(requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public protocol BaseRequestValues {
}
public protocol AppDataRequestValues {
  var appData: TiendeoCore.AppData { get set }
}
public class GetTagBoxesByCatalogIdPaginated {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetTagBoxesByCatalogIdPaginatedRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, isDynamic: Swift.Bool, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData, sort: Swift.String? = nil, includeSiblings: Swift.Bool)
  @objc deinit
}
public struct TiendeoCountriesDataRepository : TiendeoCore.TiendeoCountriesRepository {
  public init(dataSources: [TiendeoCore.TiendeoCountriesDataSource])
  public func getTiendeoCountries() -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  public func getTiendeoCountryByCountryCode(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public struct NavigationStatsEntity {
  public let searchWord: Swift.String?
  public let searchType: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String
  public let view: Swift.String?
  public let integration: Swift.String?
  public let provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let origin: Swift.String?
  public let numResults: Swift.Int
  public let searchCity: Swift.String?
  public var initialURL: Swift.String?
  public let adUserId: Swift.String
  public init(searchWord: Swift.String?, searchType: Swift.String?, pageType: Swift.String?, userToken: Swift.String, version: Swift.String, view: Swift.String?, integration: Swift.String?, provider: Swift.String?, clientTimeStamp: Swift.String, timeZoneOffset: Swift.Int, platform: Swift.String, origin: Swift.String?, numResults: Swift.Int, searchCity: Swift.String?, initialURL: Swift.String?, adUserId: Swift.String)
}
extension TiendeoCore.InputStatsEntity {
  public func transformToNavigationStatsEntity() -> TiendeoCore.NavigationStatsEntity
}
public enum NavigationScreen {
  case custom(Swift.String)
  case root, homeFavorite, homeExplore, homeLatest, homeCategory, homeRetailer, homeMall, searchCategory, searchRetailer, searchProduct, searchBrand, searchMall, searchHistory, storeDetails, cardViewer, clipsShoppingList, loyaltyCards, loyaltyCardsDetail, map, chollosLanding, cashback, catalogViewer, changeLocation, search, settings, profile, catalogTour
  public var value: Swift.String {
    get
  }
}
public enum RepositoryErrors : Swift.Int, Swift.Error {
  case unsupportedOperationException
  case executeException
  case parametersException
  case jsonError
  case urlFormat
  case loginNeeded
  case wrongDataSource
  public var localizedDescription: Swift.String {
    get
  }
  public var code: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Product {
  public let id: Swift.String
  public let name: Swift.String
  public let checked: Swift.Bool
  public let category: Swift.String
  public let offers: Swift.Int
  public init(id: Swift.String, name: Swift.String, checked: Swift.Bool, category: Swift.String, offers: Swift.Int)
}
extension TiendeoCore.Product {
  public func transformToSearchResult() -> TiendeoCore.SearchResult
}
public protocol CategoriesRepository {
  func getCategories(requestValues: TiendeoCore.GetCategoriesRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  func getCategories(requestValues: TiendeoCore.GetCategoriesByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
public class ReferrerInfo {
  public var name: Swift.String?
  public var picture: Swift.String?
  public init(name: Swift.String?, picture: Swift.String?)
  @objc deinit
}
public struct PrintStatPromoCouponEntity {
  public var promoCouponId: Swift.String
  public var position: Swift.Int
  public init(promoCouponId: Swift.String, position: Swift.Int)
}
public struct StoreDetailDataRepository : TiendeoCore.StoreDetailRepository {
  public init(dataSources: [TiendeoCore.StoreDetailDataSource])
  public func getStoreDetail(with id: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.StoreDetail>
}
public struct FavoriteViewEntity {
  public var id: Swift.String?
  public let retailer: TiendeoCore.RetailerViewEntity
  public let city: Swift.String?
  public let catalogs: [Swift.String]?
  public var suggested: Swift.Bool
  public let category: TiendeoCore.CategoryViewEntity?
  public init(id: Swift.String?, retailer: TiendeoCore.RetailerViewEntity, city: Swift.String?, catalogs: [Swift.String]?, suggested: Swift.Bool, category: TiendeoCore.CategoryViewEntity?)
  public func transformToFavorite(id: Swift.String, lat: Swift.Float?, lon: Swift.Float?, city: Swift.String?, type: Swift.Int?) -> TiendeoCore.Favorite
}
extension TiendeoCore.Favorite {
  public func transformToUi(staticUrl: Swift.String) -> TiendeoCore.FavoriteViewEntity?
}
extension TiendeoCore.Retailer {
  public func transformToFavoriteUi(staticUrl: Swift.String) -> TiendeoCore.FavoriteViewEntity?
}
extension TiendeoCore.CatalogViewEntity {
  public func transformToFavoriteUI(cityName: Swift.String?) -> TiendeoCore.FavoriteViewEntity?
}
extension Swift.Sequence where Self.Element == TiendeoCore.Favorite {
  public func transformToUi(staticUrl: Swift.String) -> [TiendeoCore.FavoriteViewEntity]
}
extension Swift.Sequence where Self.Element == TiendeoCore.Retailer {
  public func transformToFavoriteUi(staticUrl: Swift.String) -> [TiendeoCore.FavoriteViewEntity]
}
public class GetInvalidPromoCouponIdsByRetailerIds {
  public init(promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ params: TiendeoCore.GetInvalidPromoCouponIdsByRetailerIdsRequestValues) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
  @objc deinit
}
public class GetInvalidPromoCouponIdsByRetailerIdsRequestValues {
  public var countryCode: Swift.String
  public var retailersIds: [Swift.String]
  public init(countryCode: Swift.String, retailersIds: [Swift.String])
  @objc deinit
}
extension TiendeoCore.PrintStatLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatLocal>
  @objc @NSManaged dynamic public var baseStatsUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var city: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientTimestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var integration: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locationType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pageType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var platform: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var provider: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var searchType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var searchWord: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var selectedLatitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var selectedLongitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneOffset: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var view: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var articles: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var banner: TiendeoCore.PrintStatBannerLocal? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogs: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var promoCoupons: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension TiendeoCore.PrintStatLocal {
  @objc(addArticlesObject:) @NSManaged dynamic public func addToArticles(_ value: TiendeoCore.PrintStatArticleLocal)
  @objc(removeArticlesObject:) @NSManaged dynamic public func removeFromArticles(_ value: TiendeoCore.PrintStatArticleLocal)
  @objc(addArticles:) @NSManaged dynamic public func addToArticles(_ values: Foundation.NSSet)
  @objc(removeArticles:) @NSManaged dynamic public func removeFromArticles(_ values: Foundation.NSSet)
}
extension TiendeoCore.PrintStatLocal {
  @objc(addCatalogsObject:) @NSManaged dynamic public func addToCatalogs(_ value: TiendeoCore.PrintStatCatalogLocal)
  @objc(removeCatalogsObject:) @NSManaged dynamic public func removeFromCatalogs(_ value: TiendeoCore.PrintStatCatalogLocal)
  @objc(addCatalogs:) @NSManaged dynamic public func addToCatalogs(_ values: Foundation.NSSet)
  @objc(removeCatalogs:) @NSManaged dynamic public func removeFromCatalogs(_ values: Foundation.NSSet)
}
extension TiendeoCore.PrintStatLocal {
  @objc(addPromoCouponsObject:) @NSManaged dynamic public func addToPromoCoupons(_ value: TiendeoCore.PrintStatPromoCouponLocal)
  @objc(removePromoCouponsObject:) @NSManaged dynamic public func removeFromPromoCoupons(_ value: TiendeoCore.PrintStatPromoCouponLocal)
  @objc(addPromoCoupons:) @NSManaged dynamic public func addToPromoCoupons(_ values: Foundation.NSSet)
  @objc(removePromoCoupons:) @NSManaged dynamic public func removeFromPromoCoupons(_ values: Foundation.NSSet)
}
public struct StoreDetailRemoteDataSource : TiendeoCore.StoreDetailDataSource {
  public init()
  public func getStoreDetail(with id: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) throws -> RxSwift.Observable<TiendeoCore.StoreDetail?>
}
@_inheritsConvenienceInitializers open class SFTrackerController : TiendeoCore.SFTrackerControllerBase {
  public static let sharedInstance: TiendeoCore.SFTrackerController
  override public func initialize(countryCode: Swift.String, gdprEnabled: Swift.Bool, clientPropertyId: Swift.String, getTiendeoCountryByCountryCodeUseCase: TiendeoCore.GetTiendeoCountryByCountryCode = GetTiendeoCountryByCountryCodeAssemblerInjection().resolve())
  override public init()
  @objc deinit
}
extension TiendeoCore.SFTrackerController {
  public func catalogOpen(shopfullyId: Swift.String, catalogPage: Swift.Int, inputStatsEntity: TiendeoCore.InputStatsEntity)
  public func catalogBrowse(shopfullyId: Swift.String, catalogPage: Swift.Int, inputStatsEntity: TiendeoCore.InputStatsEntity)
  public func catalogClose(shopfullyId: Swift.String, catalogPage: Swift.Int, inputStatsEntity: TiendeoCore.InputStatsEntity)
  public func catalogImpression(shopfullyId: Swift.String, affinity: Swift.Int?, catalogPage: Swift.Int, printStatEntity: TiendeoCore.PrintStatEntity, duration: Foundation.TimeInterval)
}
public struct Deal {
  public let articleId: Swift.String
  public let name: Swift.String
  public let price: Swift.String?
  public let oldPrice: Swift.String?
  public let promo: Swift.String?
  public let catalogId: Swift.String
  public let shopfullyId: Swift.String?
  public let catalogTitle: Swift.String?
  public let page: Swift.Int
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let retailerImageUrl: Swift.String
  public let imageUrl: Swift.String
  public let url: Swift.String?
  public let expiresIn: Swift.String?
  public let publicationDate: Foundation.Date?
  public let expirationDate: Foundation.Date
  public let temperature: Swift.Int?
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let daysToExpire: Swift.Int
  public let daysSincePublication: Swift.Int
  public var isSaved: Swift.Bool
  public let catalogIsDynamic: Swift.Bool
  public let catalogExternalUrl: Swift.String
  public let infoPrice: Swift.String?
  public let description: Swift.String?
  public let chips: [TiendeoCore.Chip]?
  public let brandName: Swift.String?
  public let modelName: Swift.String?
  public init(articleId: Swift.String, name: Swift.String, price: Swift.String?, oldPrice: Swift.String?, promo: Swift.String?, catalogId: Swift.String, shopfullyId: Swift.String?, catalogTitle: Swift.String?, page: Swift.Int, retailerId: Swift.String, retailerName: Swift.String, retailerImageUrl: Swift.String, imageUrl: Swift.String, url: Swift.String?, expiresIn: Swift.String?, publicationDate: Foundation.Date?, expirationDate: Foundation.Date, temperature: Swift.Int?, productId: Swift.String?, brandId: Swift.String?, daysToExpire: Swift.Int, daysSincePublication: Swift.Int, isSaved: Swift.Bool, catalogIsDynamic: Swift.Bool, catalogExternalUrl: Swift.String, infoPrice: Swift.String?, description: Swift.String?, chips: [TiendeoCore.Chip]?, brandName: Swift.String?, modelName: Swift.String?)
}
public struct ProductsDataRepository : TiendeoCore.ProductsRepository {
  public init(dataSources: [TiendeoCore.ProductsDataSource])
  public func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
  public func getSavedProductsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateSavedProductsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool>
}
public class AddEmptyList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.AddEmptyListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class AddEmptyListRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct TiendeoCountriesLocalDataSource : TiendeoCore.TiendeoCountriesDataSource {
  public init()
  public func getTiendeoCountries() -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  public func getTiendeoCountryByCountryCode(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public class MallDataRepository : TiendeoCore.MallRepository {
  public init(remoteDataSource: TiendeoCore.MallDataSource)
  public func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  public func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  public func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class SendTicket {
  public init(ticketRepository: TiendeoCore.TicketRepository, promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ params: TiendeoCore.SendTicketRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendTicketRequestValues {
  public var countryCode: Swift.String
  public init(promoCoupons: [TiendeoCore.PromoCoupon], images: [Foundation.Data], userId: Swift.String, countryCode: Swift.String, referrerHash: Swift.String? = nil, isLogged: Swift.Bool)
  @objc deinit
}
public struct ViewerProIntegrationRemoteEntity : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum FilterType : Swift.String {
  case tabFavorites
  case tabExplore
  case category
  case retailer
  case mall
  case deals
  case tabLatest
  case tab
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Filter {
  public let requestBody: [Swift.String : Any?]?
  public let requestHeader: [Swift.String : Swift.String?]?
  public let requestUrl: Swift.String
  public let mapping: Swift.Bool
  public let labelText: Swift.String
  public let localizeStringKey: Swift.String
  public let method: Swift.String
  public let defaultScreen: Swift.Bool
  public let type: TiendeoCore.FilterType
  public let position: Swift.Int
  public init(requestBody: [Swift.String : Any?]?, requestHeader: [Swift.String : Swift.String?]?, requestUrl: Swift.String, mapping: Swift.Bool, labelText: Swift.String, localizeStringKey: Swift.String, method: Swift.String, defaultScreen: Swift.Bool, type: TiendeoCore.FilterType, position: Swift.Int)
}
public struct RetailersDataRepository : TiendeoCore.RetailersRepository {
  public init(dataSources: [TiendeoCore.RetailersDataSource])
  public func getRetailers(_ requestValues: TiendeoCore.GetRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getRecommendedRetailers(_ requestValues: TiendeoCore.GetRecommendedRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  public func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  public func getRetailerIsClient(requestValues: TiendeoCore.GetRetailerIsClientRequestValues) -> RxSwift.Observable<Swift.Bool?>
}
public enum UserNotificationStatus : Swift.String {
  case reviewed
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TiendeoCountriesRepository {
  func getTiendeoCountries() -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  func getTiendeoCountryByCountryCode(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public struct ConfigRemoteDataSource : TiendeoCore.ConfigDataSource {
  public init()
  public func getGlobalIntegrations(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper?>
  public func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public class ConsentGdpr {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.ConsentGdprDataRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class ConsentGdprDataRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var appUserId: Swift.String?
  public var userKey: Swift.String?
  public var complianceText: Swift.String?
  public var clientTimestamp: Swift.String?
  public var response: Swift.String?
  public init(baseUrl: Swift.String, appUserId: Swift.String?, userKey: Swift.String?, complianceText: Swift.String?, clientTimestamp: Swift.String?, response: Swift.String?)
  @objc deinit
}
public class PromoCouponRemoteDataSource : TiendeoCore.PromoCouponDataSource {
  public init()
  public func getPromoCouponById(requestValues: TiendeoCore.GetPromoCouponByIdRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  public func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String, start: Swift.Int, count: Swift.Int, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  public func getPromoCouponsTypeCashback(_ requestValues: TiendeoCore.GetPromoCouponsTypeCashbackRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  public func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
  @objc deinit
}
public struct CatalogLocalDataSource : TiendeoCore.CatalogDataSource {
  public init()
  public func getCatalogs(requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogById(requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog?>
  public func getCatalogsByIds(catalogIds: [Swift.String], countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRelatedCatalogs(requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRecommendedCatalogs(requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public class GetRecommendedArticlesByLatLonAndSearchWord {
  public init(articleRepository: TiendeoCore.ArticleRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedArticlesByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public class GetRecommendedArticlesByLatLonAndSearchWordRequestValues {
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData, appUserId: Swift.String)
  @objc deinit
}
public class SendTimeStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendTimeStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendTimeStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var readingStatsEntity: TiendeoCore.ReadingStatsEntity
  public init(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity)
  @objc deinit
}
public protocol RetailersDataSource {
  func getRetailers(_ requestValues: TiendeoCore.GetRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getRecommendedRetailers(_ requestValues: TiendeoCore.GetRecommendedRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  func getRetailerIsClient(requestValues: TiendeoCore.GetRetailerIsClientRequestValues) -> RxSwift.Observable<Swift.Bool?>
}
@objc public class InputStatsEntity : ObjectiveC.NSObject {
  public var searchWord: Swift.String?
  public var searchType: Swift.String?
  public var searchCity: Swift.String?
  public var pageType: Swift.String?
  public var userToken: Swift.String
  public var version: Swift.String
  public var position: Swift.Int?
  public var realLatitude: Swift.Float?
  public var realLongitude: Swift.Float?
  public var selectedLatitude: Swift.Float?
  public var selectedLongitude: Swift.Float?
  public var locationType: Swift.String?
  public var openingHash: Swift.String?
  public var retailerId: Swift.String?
  public var gdprEnabled: Swift.Bool
  public var view: Swift.String?
  final public let origin: Swift.String?
  public var eventName: Swift.String?
  public var action: Swift.String?
  public var integration: Swift.String?
  public var provider: Swift.String?
  public var productId: Swift.String?
  public var brandId: Swift.String?
  public var articleId: Swift.String?
  public var catalogId: Swift.String?
  public var categoryId: Swift.String?
  public var pageNumber: Swift.Int?
  public var numResults: Swift.Int?
  public var notificationId: Swift.String?
  public var userId: Swift.String?
  public var senderToken: Swift.String?
  public var countryCode: Swift.String
  public var adsTrackingManager: TiendeoCore.AdsTrackingManager
  public var forwardExternalTiendeoParamsRetailerIds: [Swift.String]
  public var sfLatitude: Swift.Float?
  public var sfLongitude: Swift.Float?
  public init(searchWord: Swift.String? = nil, searchType: Swift.String? = nil, searchCity: Swift.String? = nil, pageType: Swift.String? = "", userToken: Swift.String, version: Swift.String, position: Swift.Int? = nil, realLatitude: Swift.Float? = nil, realLongitude: Swift.Float? = nil, selectedLatitude: Swift.Float? = nil, selectedLongitude: Swift.Float? = nil, openingHash: Swift.String? = nil, locationType: Swift.String? = nil, retailerId: Swift.String? = nil, gdprEnabled: Swift.Bool, view: Swift.String? = CoreConstants.Stats.undefined, origin: Swift.String? = nil, eventName: Swift.String? = nil, action: Swift.String? = nil, integration: Swift.String? = nil, provider: Swift.String? = nil, productId: Swift.String? = nil, brandId: Swift.String? = nil, articleId: Swift.String? = nil, catalogId: Swift.String? = nil, categoryId: Swift.String? = nil, pageNumber: Swift.Int? = nil, numResults: Swift.Int? = nil, notificationId: Swift.String? = nil, userId: Swift.String? = nil, senderToken: Swift.String? = nil, countryCode: Swift.String, adsTrackingManager: TiendeoCore.AdsTrackingManager = AdsTrackingManager(), forwardExternalTiendeoParamsRetailerIds: [Swift.String] = [], sfLatitude: Swift.Float? = 0.0, sfLongitude: Swift.Float? = 0.0)
  public func getAdUserId() -> Swift.String
  public func getShopfullyLocationType() -> Swift.String
  @objc deinit
}
public class ExtractUserData {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.ExtractUserDataRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class ExtractUserDataRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var appUserId: Swift.String?
  public var userKey: Swift.String?
  public var userEmail: Swift.String
  public init(baseUrl: Swift.String, appUserId: Swift.String?, userKey: Swift.String?, userEmail: Swift.String)
  @objc deinit
}
public protocol ListItem {
  var viewIdentifier: Swift.String { get set }
  var height: CoreFoundation.CGFloat { get set }
}
public protocol ListItemSelectable {
  var didSelectItem: ((TiendeoCore.ListItemSelectable, Swift.Int, Swift.Bool) -> Swift.Void) { get set }
}
public protocol ListItemClippable {
  var didPressClipButton: ((TiendeoCore.ListItemClippable) -> Swift.Void) { get set }
}
public protocol ListItemCoupon {
  var didPressCopyCouponButton: ((Swift.String) -> Swift.Void) { get set }
}
extension Swift.Sequence where Self.Element == TiendeoCore.ListItem {
  public func groupBy(numberOfItemsPerRow: Swift.Int) -> [[TiendeoCore.ListItem]]
}
public class SendDeepLinkOnBoardStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendDeepLinkOnBoardStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendDeepLinkOnBoardStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity
  public init(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity)
  @objc deinit
}
public struct StoresLocalDataSource : TiendeoCore.StoresDataSource {
  public init()
  public func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  public func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.Store?>
}
public class GetRetailersByFilter {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetRetailersByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  @objc deinit
}
public class GetRetailersByFilterRequestValues {
  public var countryCode: Swift.String
  public var filterRequest: TiendeoCore.FilterRequestParams
  public init(filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class TndLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CatalogDisplayedLocal) public class CatalogDisplayedLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol ShoppingListsRepository {
  func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func syncShoppingList(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public struct FiltersLocalDataSource : TiendeoCore.FiltersDataSource {
  public init()
  public func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public enum TagBoxAction {
  case clip
  case popup
  case url
  public static func == (a: TiendeoCore.TagBoxAction, b: TiendeoCore.TagBoxAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ViewerProLocalIntegrationEntity {
  public let enableTagIcon: Swift.Bool
  public let enableClipAnimationImage: Swift.Bool
  public let actionClipAnimationImage: TiendeoCore.TagBoxAction
  public let showNavigationBar: Swift.Bool
  public init(enableTagIcon: Swift.Bool, enableClipAnimationImage: Swift.Bool, actionClipAnimationImage: TiendeoCore.TagBoxAction, showNavigationBar: Swift.Bool)
}
extension TiendeoCore.ViewerProLocalIntegrationEntity {
  public static var defaultEntity: TiendeoCore.ViewerProLocalIntegrationEntity {
    get
  }
}
public class UpdateLoyaltyCard {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.UpdateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  @objc deinit
}
public class UpdateLoyaltyCardRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
extension Swift.Int {
  public func transformToFormattedNumberWith(numberOfDigits: Swift.Int) -> Swift.String
}
extension Swift.Int : Swift.Sequence {
  public func makeIterator() -> Swift.CountableRange<Swift.Int>.Iterator
  public typealias Element = Swift.IndexingIterator<Swift.Range<Swift.Int>>.Element
  public typealias Iterator = Swift.CountableRange<Swift.Int>.Iterator
}
extension TiendeoCore.TagBoxesRemoteDataSource {
  public func syncTagBoxes(tagboxes: [TiendeoCore.TagBox], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public protocol CollectionViewCellProtocol : UIKit.UICollectionViewCell {
  static func registerCellCoreBundle(collectionView: UIKit.UICollectionView)
  static func registerCell(collectionView: UIKit.UICollectionView, bundle: Foundation.Bundle?)
  static func reuseIdentifier() -> Swift.String
}
extension TiendeoCore.CollectionViewCellProtocol {
  public static func registerCellCoreBundle(collectionView: UIKit.UICollectionView)
  public static func registerCell(collectionView: UIKit.UICollectionView, bundle: Foundation.Bundle?)
  public static func reuseIdentifier() -> Swift.String
}
public struct LoyaltyCardsLocalDataSource : TiendeoCore.LoyaltyCardsDataSource {
  public init()
  public func getLoyaltyCards(getLoyaltyCardsRequestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func syncLoyaltyCards(syncLoyaltyCardsRequestValues: TiendeoCore.SyncLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func syncLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func rewriteLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  public func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
public class GetOffersByProduct {
  public init(productsRepository: TiendeoCore.ProductsRepository)
  public func execute(_ requestValues: TiendeoCore.GetOffersByProductRequestValues) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
  @objc deinit
}
public class GetOffersByProductRequestValues {
  public var productNames: [Swift.String]
  public var countryCode: Swift.String
  public var latitude: Swift.Float
  public var longitude: Swift.Float
  public init(productNames: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float)
  @objc deinit
}
public protocol GeofencesRepository {
  func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
}
public protocol UserRepository {
  func getUser() -> RxSwift.Observable<TiendeoCore.User>
}
public class SendArticleClipEventStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendArticleClipEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendArticleClipEventStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity
  public init(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity)
  @objc deinit
}
public class GetShoppingList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.GetShoppingListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  @objc deinit
}
public class GetShoppingListRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct ReferrersDataRepository : TiendeoCore.ReferrersRepository {
  public init(remoteDataSource: TiendeoCore.ReferrersDataSource)
  public func getReferrerInfo(with countryCode: Swift.String, referrerHash: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<TiendeoCore.ReferrerInfo?>
  public func updateReferredCode(_ referredCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
extension Swift.Array {
  public func takeElements(elementCount: Swift.Int) -> Swift.Array<Element>
  public func toString() -> Swift.String?
}
extension Swift.Array where Element : Swift.Equatable {
  public func removeDuplicates() -> [Element]
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ClipButton : UIKit.UIButton {
  @objc deinit
}
public struct FilterRequestParams {
  public let filter: TiendeoCore.Filter
  public let start: Swift.Int?
  public let count: Swift.Int?
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let showExpiredCatalogs: Swift.Bool?
  public init(filter: TiendeoCore.Filter, start: Swift.Int?, count: Swift.Int?, latitude: Swift.Float, longitude: Swift.Float, showExpiredCatalogs: Swift.Bool? = nil)
}
public class GetNumberOfTickets {
  public init(ticketRepository: TiendeoCore.TicketRepository)
  public func execute(_ params: TiendeoCore.GetNumberOfTicketsRequestValues) -> RxSwift.Observable<Swift.Int>
  @objc deinit
}
public class GetNumberOfTicketsRequestValues {
  public var countryCode: Swift.String
  public var days: Swift.Int?
  public var isLogged: Swift.Bool
  public init(countryCode: Swift.String, days: Swift.Int? = nil, isLogged: Swift.Bool)
  @objc deinit
}
public struct FavoritesRemoteDataSource : TiendeoCore.FavoritesDataSource {
  public init()
  public func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func getFavorite(_ requestValues: TiendeoCore.GetFavoriteRequestValues) -> RxSwift.Observable<TiendeoCore.Favorite?>
  public func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func migrateFavorites() -> RxSwift.Observable<Swift.Bool>
}
public class GetAppUser {
  public init(userRepository: TiendeoCore.AppUserRepository)
  public func execute(_ requestValues: TiendeoCore.GetAppUserRequestValues) -> RxSwift.Observable<TiendeoCore.AppUser?>
  @objc deinit
}
public class GetAppUserRequestValues {
  public var countryCode: Swift.String
  public var uuid: Swift.String
  public init(uuid: Swift.String, countryCode: Swift.String)
  @objc deinit
}
extension Swift.Sequence {
  public func group<U>(by key: (Self.Iterator.Element) -> U) -> [U : [Self.Iterator.Element]] where U : Swift.Hashable
}
public struct DealCount {
  public let count: Swift.Int
  public let category: TiendeoCore.CategoryItem
  public init(count: Swift.Int, category: TiendeoCore.CategoryItem)
}
public protocol StatsRepository {
  func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleClipEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogOpeningStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendBannerActiontStats(baseUrl: Swift.String, bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  func sendPrintStats() -> RxSwift.Observable<Swift.Bool>
  func sendLoginEventStats(_ requestValues: TiendeoCore.SendLoginEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
}
public struct GlobalIntegrationsWrapper {
  public let config: TiendeoCore.Config
  public let integration: TiendeoCore.Integration
  public init(config: TiendeoCore.Config, integration: TiendeoCore.Integration)
}
public struct PrintStatArticleEntity {
  public var articleId: Swift.String?
  public var productId: Swift.String
  public var catalogId: Swift.String
  public var brandId: Swift.String
  public var position: Swift.Int
  public var modelName: Swift.String
  public var itemType: Swift.String?
  public var saleId: Swift.String?
  public var view: Swift.String?
  public init(articleId: Swift.String?, productId: Swift.String, catalogId: Swift.String, brandId: Swift.String, position: Swift.Int, modelName: Swift.String, itemType: Swift.String?, saleId: Swift.String?, view: Swift.String? = nil)
}
extension Swift.Array where Element == TiendeoCore.PrintStatArticleEntity {
  public func addView(_ view: Swift.String?) -> [TiendeoCore.PrintStatArticleEntity]
}
extension TiendeoCore.PrintStatArticleEntity {
  public func addView(_ view: Swift.String?) -> TiendeoCore.PrintStatArticleEntity
}
public class GetArticlesWithStatus {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetArticlesWithStatusRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public class GetArticlesWithStatusRequestValues {
  public var countryCode: Swift.String
  public init(articlesObservable: RxSwift.Observable<[TiendeoCore.Article]>, countryCode: Swift.String)
  @objc deinit
}
public struct CitiesDataRepository : TiendeoCore.CitiesRepository {
  public init(dataSources: [TiendeoCore.CitiesDataSource])
  public func getCity(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.City>
}
public struct StoresRemoteDataSource : TiendeoCore.StoresDataSource {
  public init()
  public func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.Store?>
  public func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  public func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
}
public class FavoritesLocalDataSource : TiendeoCore.FavoritesDataSource {
  public init()
  public func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func getFavorite(_ requestValues: TiendeoCore.GetFavoriteRequestValues) -> RxSwift.Observable<TiendeoCore.Favorite?>
  public func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func migrateFavorites() -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public struct GeofencesLocalDataSource : TiendeoCore.GeofencesDataSource {
  public init()
  public func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func saveGeofences(geofences: [TiendeoCore.Geofence]) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func getTriggeredGeofences() -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  public func deleteNonTriggeredGeofences() -> RxSwift.Observable<Swift.Bool>
  public func updateTriggeredGeofencesStatus() -> RxSwift.Observable<Swift.Bool>
}
public class PromoCouponRetailer {
  final public let id: Swift.String
  final public let name: Swift.String?
  final public let seoName: Swift.String?
  final public let logoURL: Swift.String?
  final public let promoCouponExternalId: Swift.String?
  final public let promoCouponExternalData: Swift.String?
  public init(id: Swift.String, name: Swift.String?, seoName: Swift.String?, logoURL: Swift.String?, promoCouponExternalId: Swift.String?, promoCouponExternalData: Swift.String?)
  @objc deinit
}
public class GetCityById {
  public init(citiesRepository: TiendeoCore.CitiesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCityByIdRequestValues) -> RxSwift.Observable<TiendeoCore.City>
  @objc deinit
}
public class GetCityByIdRequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class GetSearchAllResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  @objc deinit
}
public class GetCategoriesByFilter {
  public init(categoriesRepository: TiendeoCore.CategoriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCategoriesByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  @objc deinit
}
public class GetCategoriesByFilterRequestValues {
  public var countryCode: Swift.String
  public var filterRequest: TiendeoCore.FilterRequestParams
  public init(filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ShoppingListLocal) public class ShoppingListLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Fonts {
  public static let sharedInstance: TiendeoCore.Fonts
  public func tndFont(_ name: Swift.String, with size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public func tndRegular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public func tndLight(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public func tndSemiBold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public func tndBold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public func tndExtraBold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func downloadFrom(url: Swift.String, placeHolder: UIKit.UIImage? = nil, options: [Kingfisher.KingfisherOptionsInfoItem]? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil)
  @_Concurrency.MainActor(unsafe) public func downloadFrom(url: Swift.String, placeHolder: UIKit.UIImage? = nil, completionHandler: @escaping (UIKit.UIImage?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func downloadKeepingCurrentImageFrom(url: Swift.String)
}
public class UpdateProductStatus {
  public init(productsRepository: TiendeoCore.ProductsRepository)
  public func execute(_ requestValues: TiendeoCore.UpdateProductStatusRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class UpdateProductStatusRequestValues {
  public var countryCode: Swift.String
  public init(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String)
  @objc deinit
}
public struct FiltersRemoteDataSource : TiendeoCore.FiltersDataSource {
  public init()
  public func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public protocol ProductsRepository {
  func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
  func getSavedProductsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.Product]>
  func updateSavedProductsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ContentListCollectionViewCell : UIKit.UICollectionViewCell, TiendeoCore.ListCollectionViewCellProtocol {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var catalogImageView: TiendeoCore.UIImageViewAligned!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var expirationLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var retailerLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) open func setupCell(with item: TiendeoCore.ListItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class GetNotifications {
  public init(notificationRepository: TiendeoCore.NotificationRepository)
  public func execute(_ requestValues: TiendeoCore.GetNotificationsRequestValues) -> RxSwift.Observable<[TiendeoCore.UserNotification]>
  @objc deinit
}
public class GetNotificationsRequestValues {
  public var countryCode: Swift.String
  public var start: Swift.Int
  public var count: Swift.Int
  public var domain: TiendeoCore.UserNotificationDomain
  public init(countryCode: Swift.String, start: Swift.Int, count: Swift.Int, domain: TiendeoCore.UserNotificationDomain)
  @objc deinit
}
public class GetRetailerIsClient {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetRetailerIsClientRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class GetRetailerIsClientRequestValues {
  public var countryCode: Swift.String
  public var retailerName: Swift.String
  public init(countryCode: Swift.String, retailerName: Swift.String)
  @objc deinit
}
public protocol CategoriesDataSource {
  func getCategories(requestValues: TiendeoCore.GetCategoriesRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  func getCategories(requestValues: TiendeoCore.GetCategoriesByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
public protocol TagBoxesDataSource {
  func getTagBoxesByCatalogIdPaginated(requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxesByCatalogId(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxesByRetailerId(_ requestValues: TiendeoCore.GetSavedTagBoxesByRetailerIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxesWithoutRetailerId(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func updateSavedTagBoxesRetailerId(with catalogs: [TiendeoCore.Catalog], countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteExpiredTagBoxes() -> RxSwift.Observable<Swift.Bool?>
  func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func syncTagBoxes(tagboxes: [TiendeoCore.TagBox], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public protocol StatsDataSource {
  func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogOpeningStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendBannerActiontStats(baseUrl: Swift.String, bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendLoginEventStats(_ requestValues: TiendeoCore.SendLoginEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  func getSavedPrintStats() -> RxSwift.Observable<[TiendeoCore.PrintStatEntity]>
  func deletePrintStats(with ids: [Swift.String]) -> RxSwift.Observable<Swift.Bool>
  func sendSavedPrintStats(baseUrl: Swift.String, printStats: [TiendeoCore.PrintStatEntity]) -> RxSwift.Observable<[Swift.String : Swift.Bool?]>
}
public protocol LoyaltyCardsDataSource {
  func getLoyaltyCards(getLoyaltyCardsRequestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func syncLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func rewriteLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
public class SendPixelStats {
  public init(pixelsRepository: TiendeoCore.PixelsRepository)
  public func execute(_ requestValues: TiendeoCore.GetPixelsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class GetPixelsRequestValues {
  public init(countryCode: Swift.String, retailerId: Swift.Int, catalogId: Swift.Int, date: Swift.String, platform: Swift.String, provider: Swift.String, origin: Swift.String? = nil, pixelType: [Swift.String])
  @objc deinit
}
public class GetStoresInRegion {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoresInRegionRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetStoresInRegionRequestValues {
  public var countryCode: Swift.String
  public init(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class GetSearchCityResults {
  public init(searchRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchCityResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class GetSearchCityResultRequestValues {
  public var countryCode: Swift.String
  public init(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class ShoppingListsDataRepository : TiendeoCore.ShoppingListsRepository {
  public init(remoteDataSource: TiendeoCore.ShoppingListsDataSource, localDataSource: TiendeoCore.ShoppingListsDataSource)
  public func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func syncShoppingList(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
extension UIKit.UIImage {
  public class func image(fromLayer layer: QuartzCore.CALayer) -> UIKit.UIImage
  convenience public init?(color: UIKit.UIColor, size: CoreFoundation.CGSize = CGSize(width: 1, height: 1))
  public class func getPromoCouponImage(type: TiendeoCore.PromoCouponType, isSaved: Swift.Bool) -> UIKit.UIImage?
  public func getBackgroundColor() -> UIKit.UIColor
  public func transformToGrayImage() -> UIKit.UIImage?
  public var template: UIKit.UIImage? {
    get
  }
}
public struct LoyaltyCardsRemoteDataSource : TiendeoCore.LoyaltyCardsDataSource {
  public init()
  public func getLoyaltyCards(getLoyaltyCardsRequestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func rewriteLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  public func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
@_hasMissingDesignatedInitializers public class InputStatsSingleton {
  public static let sharedInstance: TiendeoCore.InputStatsSingleton
  public var inputStatsEntity: TiendeoCore.InputStatsEntity?
  @objc deinit
}
public protocol TicketDataSource {
  func sendTicket(promoCoupons: [TiendeoCore.PromoCoupon], images: [Foundation.Data], userId: Swift.String, countryCode: Swift.String, referrerHash: Swift.String?) -> RxSwift.Observable<TiendeoCore.Ticket>
  func getTickets(countryCode: Swift.String, days: Swift.Int?) -> RxSwift.Observable<[TiendeoCore.Ticket]>
}
public protocol ShoppingListsDataSource {
  func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func syncShoppingList(shopingList: TiendeoCore.ShoppingList, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public class SendNotificationEventStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendNotificationEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendNotificationEventStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity
  public init(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity)
  @objc deinit
}
public protocol CatalogRepository {
  func getCatalogs(requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogById(requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog>
  func getCatalogsByIds(catalogIds: [Swift.String], countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getRelatedCatalogs(requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getRecommendedCatalogs(requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public protocol AdapterRotationProtocol {
  var collectionView: UIKit.UICollectionView! { get }
  func invalidateLayout()
}
extension TiendeoCore.AdapterRotationProtocol {
  public func invalidateLayout()
}
@_inheritsConvenienceInitializers @objc(ChipLocalEntity) public class ChipLocalEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct TCategory {
  public let id: Swift.String?
  public let name: Swift.String?
  public let affinity: Swift.Int?
  public let top: Swift.Int?
  public init(id: Swift.String?, name: Swift.String?, affinity: Swift.Int?, top: Swift.Int?)
}
extension TiendeoCore.TCategory {
  public func transformToSearchResult() -> TiendeoCore.SearchResult?
}
extension Swift.Sequence where Self.Element == TiendeoCore.TCategory {
  public func transformToSearchResult() -> [TiendeoCore.SearchResult]
}
public protocol GetAppDataProtocol {
  func getAppData(configService: TiendeoCore.ViewerProConfigService) -> TiendeoCore.AppData
  func getAppData(configService: TiendeoCore.ConfigService, manufacturers: Swift.Bool, showExpiredCatalogs: Swift.Bool?) -> TiendeoCore.AppData
}
extension TiendeoCore.GetAppDataProtocol {
  public func getAppData(configService: TiendeoCore.ViewerProConfigService) -> TiendeoCore.AppData
  public func getAppData(configService: TiendeoCore.ConfigService, manufacturers: Swift.Bool = true, showExpiredCatalogs: Swift.Bool? = nil) -> TiendeoCore.AppData
}
public struct LoyaltyCard {
  public let id: Swift.String
  public let name: Swift.String
  public let retailerId: Swift.String
  public let code: Swift.String
  public let codeFormat: Swift.String
  public let identificationType: Swift.String
  public init(id: Swift.String, name: Swift.String, retailerId: Swift.String, code: Swift.String, codeFormat: Swift.String, identificationType: Swift.String)
}
public class SendNavigationStats {
  public static var lastScreen: TiendeoCore.NavigationScreen
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendNavigationStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendNavigationStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var navigationStatsEntity: TiendeoCore.NavigationStatsEntity
  public var currentScreen: TiendeoCore.NavigationScreen
  public init(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity, currentScreen: TiendeoCore.NavigationScreen)
  @objc deinit
}
extension TiendeoCore.ShoppingListLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.ShoppingListLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var checked: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var products: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension TiendeoCore.ShoppingListLocal {
  @objc(addProductsObject:) @NSManaged dynamic public func addToProducts(_ value: TiendeoCore.ProductLocal)
  @objc(removeProductsObject:) @NSManaged dynamic public func removeFromProducts(_ value: TiendeoCore.ProductLocal)
  @objc(addProducts:) @NSManaged dynamic public func addToProducts(_ values: Foundation.NSSet)
  @objc(removeProducts:) @NSManaged dynamic public func removeFromProducts(_ values: Foundation.NSSet)
}
public class GetReferrerInfo {
  public init(referrersRepository: TiendeoCore.ReferrersRepository)
  public func execute(_ params: TiendeoCore.GetReferrerInfoRequestValues) -> RxSwift.Observable<TiendeoCore.ReferrerInfo?>
  @objc deinit
}
public class GetReferrerInfoRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(countryCode: Swift.String, referralHash: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public class GetViewerProIntegrations {
  public init(configRepository: TiendeoCore.ConfigRepository)
  public func execute(_ requestValues: TiendeoCore.GetViewerProIntegrationsRequestValues) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
  @objc deinit
}
public class GetViewerProIntegrationsRequestValues {
  public var countryCode: Swift.String
  public var provider: Swift.String
  public init(countryCode: Swift.String, provider: Swift.String)
  @objc deinit
}
public struct SearchResultsRemoteDataSource : TiendeoCore.SearchResultsDataSource {
  public init()
  public func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  public func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSearchProductResults(with searchNames: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSavedSearchProductResultsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func updateSavedSearchProductResultsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool?>
}
public struct Integration {
  public let geofencesRefreshMinutes: Swift.Double
  public let showCashback: Swift.Bool
  public let cashbackReferralPosition: Swift.Int?
  public let showRetailersAlphabetScroller: Swift.Bool
  public let referralTotalAmount: Swift.String?
  public let cashbackTutorialPosition: Swift.Int?
  public let cashbackRetailersFilters: [Swift.String]
  public let provider: Swift.String
  public let urlCashback: Swift.String?
  public let numberTopRetailersSliderHome: Swift.Int
  public let numberCatalogsToPutSliderHome: Swift.Int
  public let showExpiredCatalogs: Swift.Bool
  public let daysToExpireCatalogStory: Swift.Int
  public let urlProfile: Swift.String?
  public let useEngageSdk: Swift.Bool
  public let numberCatalogsToShowExplore: Swift.Int
  public let forwardExternalTiendeoParamsRetailerIds: [Swift.String]
  public init(geofencesRefreshMinutes: Swift.Double, showCashback: Swift.Bool, cashbackReferralPosition: Swift.Int?, showRetailersAlphabetScroller: Swift.Bool, referralTotalAmount: Swift.String?, cashbackTutorialPosition: Swift.Int?, cashbackRetailersFilters: [Swift.String], provider: Swift.String, urlCashback: Swift.String?, numberTopRetailersSliderHome: Swift.Int, numberCatalogsToPutSliderHome: Swift.Int, showExpiredCatalogs: Swift.Bool, daysToExpireCatalogStory: Swift.Int, urlProfile: Swift.String?, useEngageSdk: Swift.Bool, numberCatalogsToShowExplore: Swift.Int, forwardExternalTiendeoParamsRetailerIds: [Swift.String])
}
public class GetGeofences {
  public init(geofencesRepository: TiendeoCore.GeofencesRepository)
  public func execute(_ requestValues: TiendeoCore.GetGeofencesRequestValues) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  @objc deinit
}
public class GetGeofencesRequestValues {
  public var countryCode: Swift.String
  public init(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String)
  @objc deinit
}
public struct ViewerProIntegrations {
  public var config: TiendeoCore.Config?
  public var integration: TiendeoCore.ViewerProIntegration?
  public init(config: TiendeoCore.Config?, integration: TiendeoCore.ViewerProIntegration?)
}
public struct Geofence {
  public let id: Swift.String
  public let lat: Swift.Float
  public let lon: Swift.Float
  public let name: Swift.String
  public let message: Swift.String
  public let radius: Swift.Float
  public let type: Swift.String
  public let transition: Swift.String
  public let triggersAgain: Swift.Double
  public let retailerId: Swift.String
  public let appName: Swift.String
  public let start: Foundation.Date
  public let end: Foundation.Date
  public let action: Swift.String
  public let deeplink: Swift.String
  public init(id: Swift.String, lat: Swift.Float, lon: Swift.Float, name: Swift.String, message: Swift.String, radius: Swift.Float, type: Swift.String, transition: Swift.String, triggersAgain: Swift.Double, retailerId: Swift.String, appName: Swift.String, start: Foundation.Date, end: Foundation.Date, action: Swift.String, deeplink: Swift.String)
}
public class SendTagBoxPixelStats {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.SendTagBoxPixelStatsRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class SendTagBoxPixelStatsRequestValues {
  public var countryCode: Swift.String
  public init(tagbox: TiendeoCore.TagBox)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PassThroughView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FiltersDataSource {
  func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public struct CatalogSection {
  public let id: Swift.String
  public let catalogId: Swift.String
  public let name: Swift.String
  public let page: Swift.Int
  public let category: Swift.Int
  public init(id: Swift.String, catalogId: Swift.String, name: Swift.String, page: Swift.Int, category: Swift.Int)
}
public struct Catalog {
  public let catalogId: Swift.String
  public let shopfullyId: Swift.String?
  public let pageNumber: Swift.Int
  public let numPages: Swift.Int
  public let storeId: Swift.String
  public let retailer: TiendeoCore.Retailer?
  public let category: TiendeoCore.TCategory?
  public let expirationDate: Swift.String?
  public let activationDate: Swift.String?
  public let title: Swift.String?
  public let coupon: TiendeoCore.Coupon?
  public let externalUrl: Swift.String?
  public let withAds: Swift.Bool?
  public let isClientRetailer: Swift.Bool?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var favoriteId: Swift.String?
  public var description: Swift.String?
  public let sections: [TiendeoCore.CatalogSection]?
  public let showDetails: Swift.Bool?
  public var modelName: Swift.String?
  public let imageTemplate: Swift.String
  public let isDynamic: Swift.Bool
  public let isOnCampaing: Swift.Bool
  public var displayed: Swift.Bool?
  public var affinity: Swift.Int?
  public init(catalogId: Swift.String, shopfullyId: Swift.String?, pageNumber: Swift.Int, numPages: Swift.Int, storeId: Swift.String, retailer: TiendeoCore.Retailer?, category: TiendeoCore.TCategory?, expirationDate: Swift.String?, activationDate: Swift.String?, title: Swift.String?, coupon: TiendeoCore.Coupon?, externalUrl: Swift.String?, withAds: Swift.Bool?, width: Swift.Int?, height: Swift.Int?, favoriteId: Swift.String?, description: Swift.String?, sections: [TiendeoCore.CatalogSection]?, showDetails: Swift.Bool?, modelName: Swift.String?, imageTemplate: Swift.String, isDynamic: Swift.Bool, isOnCampaing: Swift.Bool, displayed: Swift.Bool?, affinity: Swift.Int?)
  public func getMiniImagePageUrl() -> Swift.String
  public func getSmallImagePageUrl() -> Swift.String
  public func getBigImagePageUrl() -> Swift.String
  public func getSmallImageUrl(with page: Swift.Int) -> Swift.String
  public func getExpirationDate() -> Foundation.Date?
  public func getActivationDate() -> Foundation.Date?
  public func getExpirationDays() -> Swift.Int?
  public func isExpired() -> Swift.Bool
}
public struct AppUserRemoteDataSource : TiendeoCore.AppUserDataSource {
  public init()
  public func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  public func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public enum PixelType : Swift.String {
  case HTML
  case URL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Pixel {
  public let type: TiendeoCore.PixelType
  public let value: Swift.String
  public let pixelId: Swift.String
  public init(type: TiendeoCore.PixelType, value: Swift.String, pixelId: Swift.String)
}
public class GetCatalogsWithFavorite {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsWithFavoriteRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsWithFavoriteRequestValues {
  public var countryCode: Swift.String
  public init(catalogsObservable: RxSwift.Observable<[TiendeoCore.Catalog]>, countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
extension TiendeoCore.ShoppingListsRemoteDataSource {
  public func syncShoppingList(shopingList: TiendeoCore.ShoppingList, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public class GetRecommendedLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  @objc deinit
}
public class GetRecommendedLoyaltyCardsRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol RetailersRepository {
  func getRetailers(_ requestValues: TiendeoCore.GetRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getRecommendedRetailers(_ requestValues: TiendeoCore.GetRecommendedRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  func getRetailerIsClient(requestValues: TiendeoCore.GetRetailerIsClientRequestValues) -> RxSwift.Observable<Swift.Bool?>
}
@objc @_inheritsConvenienceInitializers public class TagBoxLocalEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class LoyaltyCardsDataRepository : TiendeoCore.LoyaltyCardsRepository {
  public init(remoteDataSource: TiendeoCore.LoyaltyCardsDataSource, localDataSource: TiendeoCore.LoyaltyCardsDataSource)
  public func getLoyaltyCards(getLoyaltyCardsRequestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func createLoyaltyCard(requestValues: TiendeoCore.CreateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func updateLoyaltyCard(requestValues: TiendeoCore.UpdateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteLoyaltyCard(requestValues: TiendeoCore.DeleteLoyaltyCardByIdRequestValues) -> RxSwift.Observable<Swift.Bool>
  public func syncLoyaltyCards(syncLoyaltyCardsRequestValues: TiendeoCore.SyncLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  public func addPromoCouponUserWithLoyaltyCard(requestValues: TiendeoCore.AddPromoCouponUserWithLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public protocol GeofencesDataSource {
  func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func saveGeofences(geofences: [TiendeoCore.Geofence]) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func getTriggeredGeofences() -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  func deleteNonTriggeredGeofences() -> RxSwift.Observable<Swift.Bool>
  func updateTriggeredGeofencesStatus() -> RxSwift.Observable<Swift.Bool>
}
open class SFTrackerControllerBase {
  public init()
  public func initialize(countryCode: Swift.String, gdprEnabled: Swift.Bool, clientPropertyId: Swift.String, getTiendeoCountryByCountryCodeUseCase: TiendeoCore.GetTiendeoCountryByCountryCode = GetTiendeoCountryByCountryCodeAssemblerInjection().resolve())
  public func initialize()
  public func setClientUserId() -> Swift.String
  public func catalogOpen(shopfullyId: Swift.String, catalogPage: Swift.Int, inputStatsEntity: TiendeoCore.InputStatsEntity, sfTrackerEnabled: Swift.Bool, countryCode: Swift.String, userId: Swift.String, propertyId: Swift.String, utmMedium: Swift.String)
  public func catalogBrowse(shopfullyId: Swift.String, catalogPage: Swift.Int, inputStatsEntity: TiendeoCore.InputStatsEntity, countryCode: Swift.String, userId: Swift.String, propertyId: Swift.String, utmMedium: Swift.String)
  public func catalogClose(shopfullyId: Swift.String, catalogPage: Swift.Int, inputStatsEntity: TiendeoCore.InputStatsEntity, countryCode: Swift.String, userId: Swift.String, propertyId: Swift.String, utmMedium: Swift.String)
  public func catalogImpression(shopfullyId: Swift.String, affinity: Swift.Int?, catalogPage: Swift.Int, printStatEntity: TiendeoCore.PrintStatEntity, duration: Foundation.TimeInterval, propertyId: Swift.String, utmMedium: Swift.String)
  @objc deinit
}
public struct PrintStatEntity {
  public var city: Swift.String?
  public var searchWord: Swift.String?
  public var pageType: Swift.String?
  public var platform: Swift.String
  public var provider: Swift.String?
  public var origin: Swift.String?
  public var searchType: Swift.String?
  public var integration: Swift.String?
  public var view: Swift.String?
  public var userToken: Swift.String
  public var clientTimestamp: Swift.String
  public var timeZoneOffset: Swift.Int
  public var id: Swift.String
  public var catalogs: [TiendeoCore.PrintStatCatalogEntity]?
  public var articles: [TiendeoCore.PrintStatArticleEntity]?
  public var banner: TiendeoCore.PrintStatBannerEntity?
  public var promoCoupons: [TiendeoCore.PrintStatPromoCouponEntity]?
  public var baseStatsUrl: Swift.String
  public var latitude: Swift.Float?
  public var longitude: Swift.Float?
  public var selectedLatitude: Swift.Float
  public var selectedLongitude: Swift.Float
  public var sfLatitude: Swift.Float
  public var sfLongitude: Swift.Float
  public var locationType: Swift.String
  public var sessionId: Swift.String
  public init(city: Swift.String?, searchWord: Swift.String?, pageType: Swift.String?, platform: Swift.String = CoreConstants.Stats.platform, provider: Swift.String?, origin: Swift.String?, searchType: Swift.String?, integration: Swift.String?, view: Swift.String?, userToken: Swift.String, clientTimestamp: Swift.String = Date().stringFormatter(), timeZoneOffset: Swift.Int = TimeZone.current.secondsFromGMT(), id: Swift.String = UUID().uuidString, catalogs: [TiendeoCore.PrintStatCatalogEntity]?, articles: [TiendeoCore.PrintStatArticleEntity]?, banner: TiendeoCore.PrintStatBannerEntity?, promoCoupons: [TiendeoCore.PrintStatPromoCouponEntity]?, baseStatsUrl: Swift.String, latitude: Swift.Float?, longitude: Swift.Float?, selectedLatitude: Swift.Float, selectedLongitude: Swift.Float, sfLatitude: Swift.Float, sfLongitude: Swift.Float, locationType: Swift.String, sessionId: Swift.String)
  public func getSFLocationType() -> Swift.String
  public func getSFAdvertisingId(adsTrackingManager: TiendeoCore.AdsTrackingManager, gdprEnabled: Swift.Bool) -> Swift.String
}
public protocol FavoriteCatalogDisplayedRepository {
  func saveFavoriteCatalogDisplayed(catalog: TiendeoCore.FavoriteCatalogDisplayed) -> RxSwift.Observable<Swift.Bool>
  func getFavoriteCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.FavoriteCatalogDisplayed]>
}
extension TiendeoCore.SearchResultLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.SearchResultLocal>
  @objc @NSManaged dynamic public var category: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
}
extension TiendeoCore.TagBoxLocalEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.TagBoxLocalEntity>
  @objc @NSManaged dynamic public var articleId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expirationDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var infoPrice: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isWholePage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logoUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var oldPrice: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pageNumber: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var url: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tagProductId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tagBrandId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var chips: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sku: Swift.String? {
    @objc get
    @objc set
  }
}
extension TiendeoCore.TagBoxLocalEntity {
  @objc(addChipsObject:) @NSManaged dynamic public func addToChips(_ value: TiendeoCore.ChipLocalEntity)
  @objc(removeChipsObject:) @NSManaged dynamic public func removeFromChips(_ value: TiendeoCore.ChipLocalEntity)
  @objc(addChips:) @NSManaged dynamic public func addToChips(_ values: Foundation.NSSet)
  @objc(removeChips:) @NSManaged dynamic public func removeFromChips(_ values: Foundation.NSSet)
}
public class GetCatalogsWithFavoriteAndDisplayedStatus {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository, favoriteCatalogDisplayedRepository: TiendeoCore.FavoriteCatalogDisplayedRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsWithFavoriteRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public protocol TagBoxesRepository {
  func getTagBoxesByCatalogIdPaginated(requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxesByCatalogId(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxesByRetailerId(_ requestValues: TiendeoCore.GetSavedTagBoxesByRetailerIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxesWithoutRetailerId(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func updateSavedTagBoxesRetailerId(with catalogs: [TiendeoCore.Catalog], countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteExpiredTagBoxes() -> RxSwift.Observable<Swift.Bool?>
  func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func syncTagBoxes(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public enum CouponType {
  case offer
  case code
  public static func == (a: TiendeoCore.CouponType, b: TiendeoCore.CouponType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Coupon {
  public let couponId: Swift.String
  public let catalogId: Swift.String
  public let storeId: Swift.String
  public let shortText: Swift.String
  public let hasImage: Swift.Bool
  public let type: TiendeoCore.CouponType
  public let color: Swift.String
  public init(couponId: Swift.String, catalogId: Swift.String, storeId: Swift.String, shortText: Swift.String, hasImage: Swift.Bool, type: TiendeoCore.CouponType, color: Swift.String)
  public func getSmallImageUrl(imageTemplate: Swift.String) -> Swift.String
  public func getExternalUrl(pathWeb: Swift.String, pathCoupons: Swift.String, provider: Swift.String) -> Swift.String
}
public class PixelsDataRepository : TiendeoCore.PixelsRepository {
  public init(remoteDataSource: TiendeoCore.PixelsRemoteDataSource)
  public func sendPixelStats(requestValues: TiendeoCore.GetPixelsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ExpirationView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func loadView() -> TiendeoCore.ExpirationView
  @_Concurrency.MainActor(unsafe) public func setup(daysSincePublication: Swift.Int, daysToExpire: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class SearchResultsLocalDataSource : TiendeoCore.SearchResultsDataSource {
  public init()
  public func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  public func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSearchProductResults(with searchNames: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getSavedSearchProductResultsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func updateSavedSearchProductResultsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public struct OpenAppStatsEntity {
  public var openingFromBackground: Swift.Bool
  public var userToken: Swift.String
  public var version: Swift.String
  public let latitude: Swift.Float?
  public let longitude: Swift.Float?
  public var selectedLatitude: Swift.Float?
  public var selectedLongitude: Swift.Float?
  public var selectedCity: Swift.String?
  public var locationType: Swift.String?
  public var eventName: Swift.String?
  public var provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
}
extension TiendeoCore.InputStatsEntity {
  public func transformToOpenAppStatsEntity(openingFromBackground: Swift.Bool, selectedCity: Swift.String?) -> TiendeoCore.OpenAppStatsEntity
}
public class SyncTagBoxes {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.SyncTagBoxesRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SyncTagBoxesRequestValues {
  public var countryCode: Swift.String
  public var appUserId: Swift.String
  public init(countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public protocol StatsRequestValues {
  var baseUrl: Swift.String { get set }
}
public class GetUser {
  public init(userRepository: TiendeoCore.UserRepository)
  public func execute(_ requestValues: TiendeoCore.GetUserRequestValues) -> RxSwift.Observable<TiendeoCore.User>
  @objc deinit
}
public class GetUserRequestValues : TiendeoCore.BaseRequestValues {
  public init()
  @objc deinit
}
public class DeleteUserData {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteUserDataRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteUserDataRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var appUserId: Swift.String?
  public var userKey: Swift.String?
  public init(baseUrl: Swift.String, appUserId: Swift.String?, userKey: Swift.String?)
  @objc deinit
}
public class MarkGeofenceAsTriggeredById {
  public init(geofencesRepository: TiendeoCore.GeofencesRepository)
  public func execute(_ requestValues: TiendeoCore.MarkGeofenceAsTriggeredByIdRequestValues) -> RxSwift.Observable<TiendeoCore.Geofence?>
  @objc deinit
}
public class MarkGeofenceAsTriggeredByIdRequestValues : TiendeoCore.BaseRequestValues {
  public init(id: Swift.String)
  @objc deinit
}
public struct Config : TiendeoCore.ImageCacheProtocol {
  public let cookieDomain: Swift.String?
  public let urlFacebook: Swift.String
  public let urlTwitter: Swift.String
  public let urlLegalAdv: Swift.String
  public let prefixReplace: Swift.String
  public let prefixStatic: Swift.String
  public let staticsValues: Swift.String
  public let urlLicences: Swift.String
  public let urlAboutTiendeo: Swift.String
  public let urlConditionsOfUse: Swift.String
  public let urlPrivacyPolicy: Swift.String
  public let rutaWeb: Swift.String
  public let clicksForRate: Swift.Int
  public let adMobLanding: Swift.Bool
  public let staticUrl: Swift.String
  public let baseUrlStatsApi: Swift.String
  public let pathCatalogs: Swift.String
  public let pathCoupons: Swift.String
  public let lastCleanCacheTimestamp: Swift.Double?
  public init(cookieDomain: Swift.String?, urlFacebook: Swift.String, urlTwitter: Swift.String, urlLegalAdv: Swift.String, prefixReplace: Swift.String, prefixStatic: Swift.String, staticsValues: Swift.String, urlLicences: Swift.String, urlAboutTiendeo: Swift.String, urlConditionsOfUse: Swift.String, urlPrivacyPolicy: Swift.String, rutaWeb: Swift.String, clicksForRate: Swift.Int, adMobLanding: Swift.Bool, staticUrl: Swift.String, baseUrlStatsApi: Swift.String, pathCatalogs: Swift.String, pathCoupons: Swift.String, lastCleanCacheTimestamp: Swift.Double?)
}
public class DeleteAllShoppingLists {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteAllShoppingListsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteAllShoppingListsRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol SearchResultsRepository {
  func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getSearchProductResults(with searchNames: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getSavedSearchProductResultsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func updateSavedSearchProductResultsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool>
}
@_hasMissingDesignatedInitializers public class AppSession {
  public static let shared: TiendeoCore.AppSession
  @objc deinit
  public func setup(appSessionData: TiendeoCore.AppSessionData, sendOpenAppStatsUseCase: TiendeoCore.SendOpenAppStats)
  public func getSessionId(userDefaultRepository: TiendeoCore.UserDefaultRepository = UserDefaultRepository(), bundleIdentifier: Swift.String? = Bundle.main.bundleIdentifier) -> Swift.String
  public func checkSession(userDefaultRepository: TiendeoCore.UserDefaultRepository = UserDefaultRepository(), didEnterFromBackground: Swift.Bool = true, configService: TiendeoCore.ConfigService = ConfigService.sharedInstance, bundleIdentifier: Swift.String? = Bundle.main.bundleIdentifier)
}
public protocol DealDataSource {
  func getDeals(with filterRequest: TiendeoCore.FilterRequestParams, categoryIds: [Swift.String], sortBy: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Deal]>
  func getDealsCountByCategory(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.DealCount]>
}
public struct MallItem {
  public let id: Swift.String
  public let name: Swift.String
  public let address: Swift.String
  public let zipCode: Swift.String
  public let city: Swift.String
  public let province: Swift.String
  public let suburb: Swift.String
  public let webUrl: Swift.String
  public let phone: Swift.String
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let distance: Swift.Float
  public let hasOffers: Swift.Bool
  public let imageUrl: Swift.String
  public init(id: Swift.String, name: Swift.String, address: Swift.String, zipCode: Swift.String, city: Swift.String, province: Swift.String, suburb: Swift.String, webUrl: Swift.String, phone: Swift.String, latitude: Swift.Float, longitude: Swift.Float, distance: Swift.Float, hasOffers: Swift.Bool, imageUrl: Swift.String)
}
public protocol AppSessionData {
  func getOpenAppStatsEntity(didEnterFromBackground: Swift.Bool) -> TiendeoCore.OpenAppStatsEntity?
}
public protocol CatalogDataSource {
  func getCatalogs(requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogById(requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog?>
  func getCatalogsByIds(catalogIds: [Swift.String], countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getRelatedCatalogs(requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getRecommendedCatalogs(requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
@_inheritsConvenienceInitializers @objc(FavoriteCatalogDisplayedLocal) public class FavoriteCatalogDisplayedLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct TiendeoDomainConstants {
  public struct Settings {
    public static let channel: Swift.String
    public static let platform: Swift.String
    public static let os: Swift.String
    public static let platformStats: Swift.String
    public static let provider: Swift.String
    public static let type: Swift.String
  }
  public struct Gdpr {
    public static let Accepted: Swift.String
    public static let Rejected: Swift.String
  }
  public struct AuthHeader {
    public static let appUserId: Swift.String
    public static let countryCode: Swift.String
  }
}
public struct ShoppingListConstants {
  public static let defaultTitle: Swift.String
}
public struct CategoriesRemoteDataSource : TiendeoCore.CategoriesDataSource {
  public init()
  public func getCategories(requestValues: TiendeoCore.GetCategoriesRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  public func getCategories(requestValues: TiendeoCore.GetCategoriesByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CatalogListCollectionViewCell : TiendeoCore.ContentListCollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override public func setupCell(with item: TiendeoCore.ListItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TiendeoCore.CatalogListCollectionViewCell {
  @_Concurrency.MainActor(unsafe) public static func size() -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public static func collectionViewInsets() -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public static func collectionViewMinimumLineSpacing() -> CoreFoundation.CGFloat
}
public class FavoriteCatalogDisplayedLocalDataSource : TiendeoCore.FavoriteCatalogDisplayedDataSource {
  public init()
  public func saveFavoriteCatalogDisplayed(catalog: TiendeoCore.FavoriteCatalogDisplayed) -> RxSwift.Observable<Swift.Bool>
  public func getFavoriteCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.FavoriteCatalogDisplayed]>
  public func deleteExpiredCatalogs() -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public struct Store {
  public let storeId: Swift.String
  public let name: Swift.String?
  public let address: Swift.String?
  public let lat: Swift.Float?
  public let lon: Swift.Float?
  public let distance: Swift.Float?
  public let phone: Swift.String?
  public let retailer: TiendeoCore.Retailer?
  public var schedulesStrings: [Swift.String]?
  public var postcode: Swift.String?
  public var city: Swift.String?
  public let catalogs: [TiendeoCore.Catalog]?
  public let withCatalogs: Swift.Bool
  public static var storeIdMappingName: Swift.String
  public static var nameMappingName: Swift.String
  public static var retailerMappingName: Swift.String
  public static var addressMappingName: Swift.String
  public static var latMappingName: Swift.String
  public static var lonMappingName: Swift.String
  public static var distanceMappingName: Swift.String
  public static var phoneMappingName: Swift.String
  public static var schedulesStringsMappingName: Swift.String
  public static var postcode: Swift.String
  public static var city: Swift.String
  public static var catalogs: Swift.String
  public static var withCatalogs: Swift.String
  public init(storeId: Swift.String, name: Swift.String?, address: Swift.String?, lat: Swift.Float?, lon: Swift.Float?, distance: Swift.Float?, phone: Swift.String?, retailer: TiendeoCore.Retailer?, schedulesStrings: [Swift.String]?, postcode: Swift.String?, city: Swift.String?, catalogs: [TiendeoCore.Catalog], withCatalogs: Swift.Bool)
}
public protocol StoreDetailDataSource {
  func getStoreDetail(with id: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) throws -> RxSwift.Observable<TiendeoCore.StoreDetail?>
}
extension TiendeoCore.ChipLocalEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.ChipLocalEntity>
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tagBox: TiendeoCore.TagBoxLocalEntity? {
    @objc get
    @objc set
  }
}
public class GetFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.GetFavoritesRequestValues) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  @objc deinit
}
public class GetFavoritesRequestValues {
  public var countryCode: Swift.String
  public var appUserId: Swift.String
  public init(countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct Favorite {
  public var id: Swift.String
  public let retailerId: Swift.String
  public let retailerName: Swift.String?
  public let city: Swift.String?
  public let catalogs: [Swift.String]?
  public let latitude: Swift.Float?
  public let longitude: Swift.Float?
  public let type: Swift.Int?
  public let countryCode: Swift.String?
  public let category: TiendeoCore.TCategory?
  public init(id: Swift.String, retailerId: Swift.String, retailerName: Swift.String?, city: Swift.String?, catalogs: [Swift.String]?, latitude: Swift.Float?, longitude: Swift.Float?, type: Swift.Int?, countryCode: Swift.String? = "", category: TiendeoCore.TCategory?)
}
public struct FavoriteType {
  public static let retailer: Swift.String
}
public class GetDynamicFilters {
  public init(filtersRepository: TiendeoCore.FiltersRepository)
  public func execute(_ requestValues: TiendeoCore.GetNewFiltersRequestValues) -> RxSwift.Observable<[TiendeoCore.Filter]>
  @objc deinit
}
public class GetNewFiltersRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public enum ChipType : Swift.String {
  case outline
  case fill
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Chip {
  public let type: TiendeoCore.ChipType
  public let text: Swift.String
  public init(type: TiendeoCore.ChipType, text: Swift.String)
}
public struct PrintStatCatalogEntity {
  public var id: Swift.String
  public var shopfullyId: Swift.String?
  public var affinity: Swift.Int?
  public var position: Swift.Int
  public var modelName: Swift.String
  public var page: Swift.Int?
  public var duration: Foundation.TimeInterval?
  public init(id: Swift.String, shopfullyId: Swift.String?, affinity: Swift.Int?, position: Swift.Int, modelName: Swift.String, page: Swift.Int? = nil, duration: Foundation.TimeInterval? = nil)
}
public struct RetailersRemoteDataSource : TiendeoCore.RetailersDataSource {
  public init()
  public func getRetailers(_ requestValues: TiendeoCore.GetRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getRetailerIsClient(requestValues: TiendeoCore.GetRetailerIsClientRequestValues) -> RxSwift.Observable<Swift.Bool?>
  public func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getRecommendedRetailers(_ requestValues: TiendeoCore.GetRecommendedRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  public func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
}
public protocol GetTiendeoCountryByCountryCodeAssembler {
  func resolve() -> TiendeoCore.GetTiendeoCountryByCountryCode
}
extension TiendeoCore.GetTiendeoCountryByCountryCodeAssembler {
  public func resolve() -> TiendeoCore.GetTiendeoCountryByCountryCode
  public func resolve() -> TiendeoCore.TiendeoCountriesRepository
}
public class GetTiendeoCountryByCountryCodeAssemblerInjection : TiendeoCore.GetTiendeoCountryByCountryCodeAssembler {
  public init()
  @objc deinit
}
public struct Retailer {
  public let retailerId: Swift.String
  public let name: Swift.String
  public let afinidad: Swift.Int?
  public let top: Swift.Int?
  public let categoryId: Swift.String?
  public let isClient: Swift.Bool?
  public init(retailerId: Swift.String, name: Swift.String, afinidad: Swift.Int? = nil, top: Swift.Int? = nil, categoryId: Swift.String? = nil, isClient: Swift.Bool?)
  public func imageUrl(staticUrl: Swift.String) -> Swift.String
  public static func imageUrl(staticUrl: Swift.String, retailerId: Swift.String?) -> Swift.String
}
extension TiendeoCore.Retailer : Swift.Equatable {
  public static func == (lhs: TiendeoCore.Retailer, rhs: TiendeoCore.Retailer) -> Swift.Bool
}
extension Swift.Sequence where Self.Element == TiendeoCore.Retailer {
  public func transformToFavorite() -> [TiendeoCore.Favorite]
}
extension Swift.Sequence where Self.Element == TiendeoCore.Retailer {
  public func transformToSearchResult() -> [TiendeoCore.SearchResult]
}
public class GetLatestSearchProductResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLatestSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class SaveTagBox {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.SaveTagBoxRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class SaveTagBoxRequestValues {
  public var countryCode: Swift.String
  public init(tagBox: TiendeoCore.TagBox, countryCode: Swift.String)
  @objc deinit
}
public protocol CitiesRepository {
  func getCity(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.City>
}
open class ViewerProConfigService {
  public static let sharedInstance: TiendeoCore.ViewerProConfigService
  public var config: TiendeoCore.Config?
  public var integration: TiendeoCore.ViewerProIntegration? {
    get
    set
  }
  public var localIntegration: TiendeoCore.ViewerProLocalIntegrationEntity {
    get
    set
  }
  public var selectedCountry: Swift.String?
  public var showExpiredCatalogs: Swift.Bool
  public init()
  public func currentIntegration() -> TiendeoCore.ViewerProIntegration
  public func currentConfig() -> TiendeoCore.Config
  public func currentLocalIntegration() -> TiendeoCore.ViewerProLocalIntegrationEntity
  open func shouldReload() -> Swift.Bool
  public func isExpired() -> Swift.Bool
  public func isLoaded() -> Swift.Bool
  public func isProviderTiendeo() -> Swift.Bool
  public func getCountry() -> Swift.String?
  @objc deinit
}
public enum UserNotificationType : Swift.String {
  case ticketReviewed
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SearchResultType {
  public static let generic: Swift.String
  public static let match: Swift.String
  public static let category: Swift.String
  public static let retailer: Swift.String
  public static let product: Swift.String
  public static let brand: Swift.String
  public static let shoppingCenter: Swift.String
  public static let historial: Swift.String
  public static let retailerSuggested: Swift.String
  public static let categories: Swift.String
}
public struct SearchResult {
  public let searchResultId: Swift.String
  public let name: Swift.String
  public var type: Swift.String
  public var category: Swift.String?
  public var visited: Swift.Bool
  public var imageUrl: Swift.String?
  public init(searchResultId: Swift.String, name: Swift.String, type: Swift.String, visited: Swift.Bool, category: Swift.String?, imageUrl: Swift.String? = nil)
}
extension TiendeoCore.SearchResult {
  public func transformToProduct() -> TiendeoCore.Product?
}
extension TiendeoCore.SearchResult : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: TiendeoCore.SearchResult, rhs: TiendeoCore.SearchResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Sequence where Self.Element == TiendeoCore.SearchResult {
  public func transformToSearchResultVisited() -> [TiendeoCore.SearchResult]
}
public class AddPromoCouponUserWithLoyaltyCard {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.AddPromoCouponUserWithLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  @objc deinit
}
public class AddPromoCouponUserWithLoyaltyCardRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public var promoCouponUser: TiendeoCore.PromoCouponUser
  public var loyaltyCard: TiendeoCore.LoyaltyCard
  public init(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
extension TiendeoCore.CategoryLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.CategoryLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var favorites: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension TiendeoCore.CategoryLocal {
  @objc(addFavoritesObject:) @NSManaged dynamic public func addToFavorites(_ value: TiendeoCore.FavoriteLocal)
  @objc(removeFavoritesObject:) @NSManaged dynamic public func removeFromFavorites(_ value: TiendeoCore.FavoriteLocal)
  @objc(addFavorites:) @NSManaged dynamic public func addToFavorites(_ values: Foundation.NSSet)
  @objc(removeFavorites:) @NSManaged dynamic public func removeFromFavorites(_ values: Foundation.NSSet)
}
public protocol ConfigRepository {
  func getGlobalIntegrations(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper>
  func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
@objc @_inheritsConvenienceInitializers public class ViewInspector : ObjectiveC.NSObject {
  public func setup(inspectedView view: UIKit.UIView, inspectedDepth depth: ObjectiveC.NSInteger, visibilityPercentage: Swift.Double = 0.5)
  @objc override dynamic public init()
  @objc deinit
}
public struct TagBox {
  public let articleId: Swift.String
  public let pageNumber: Swift.Int
  public let url: Swift.String?
  public let price: Swift.String?
  public let infoPrice: Swift.String?
  public let imageName: Swift.String?
  public let imageUrl: Swift.String?
  public let title: Swift.String?
  public var description: Swift.String?
  public let tagProductId: Swift.String?
  public let tagBrandId: Swift.String?
  public let type: Swift.Int?
  public let x1: Swift.Double
  public let x2: Swift.Double
  public let y1: Swift.Double
  public let y2: Swift.Double
  public let highlightInMagicCatalog: Swift.Bool?
  public let isWholePage: Swift.Bool
  public var catalogId: Swift.String?
  public var retailerId: Swift.String?
  public var retailerName: Swift.String?
  public var retailerLogo: Swift.String?
  public var expirationDate: Foundation.Date?
  public var timeStamp: Swift.Double?
  public let promoTag: TiendeoCore.PromoTag?
  public var brandName: Swift.String?
  public var chips: [TiendeoCore.Chip]?
  public var oldPrice: Swift.String?
  public var legalText: Swift.String?
  public var highlightedText: Swift.String?
  public var sku: Swift.String?
  public let parentId: Swift.String?
  public let siblingPosition: Swift.Int?
  public init(articleId: Swift.String, pageNumber: Swift.Int, url: Swift.String?, price: Swift.String?, infoPrice: Swift.String?, imageName: Swift.String?, imageUrl: Swift.String?, title: Swift.String?, description: Swift.String?, tagProductId: Swift.String?, tagBrandId: Swift.String?, type: Swift.Int?, x1: Swift.Double, x2: Swift.Double, y1: Swift.Double, y2: Swift.Double, highlightInMagicCatalog: Swift.Bool?, isWholePage: Swift.Bool, catalogId: Swift.String?, retailerId: Swift.String?, retailerName: Swift.String?, retailerLogo: Swift.String?, expirationDate: Foundation.Date?, timeStamp: Swift.Double?, promoTag: TiendeoCore.PromoTag?, brandName: Swift.String?, chips: [TiendeoCore.Chip]?, oldPrice: Swift.String?, legalText: Swift.String?, highlightedText: Swift.String?, sku: Swift.String?, parentId: Swift.String?, siblingPosition: Swift.Int?)
}
public protocol ReferrersRepository {
  func getReferrerInfo(with countryCode: Swift.String, referrerHash: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<TiendeoCore.ReferrerInfo?>
  func updateReferredCode(_ referredCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public struct CatalogListItem : TiendeoCore.CatalogsListItem, TiendeoCore.ListItemSelectable {
  public var viewIdentifier: Swift.String
  public var type: TiendeoCore.CatalogsListItemType
  public var didSelectItem: ((TiendeoCore.ListItemSelectable, Swift.Int, Swift.Bool) -> Swift.Void)
  public var height: CoreFoundation.CGFloat
  public var catalog: TiendeoCore.CatalogViewEntity
  public let sectionInfo: TiendeoCore.CatalogsListSectionInfo?
  public let didPressFavoriteButton: ((TiendeoCore.CatalogListItem) -> Swift.Void)?
  public static let itemHeightIphone: CoreFoundation.CGFloat
  public static let itemHeightIpad: CoreFoundation.CGFloat
  public init(viewIdentifier: Swift.String = CatalogListCollectionViewCell.reuseIdentifier(), type: TiendeoCore.CatalogsListItemType = .catalog, catalog: TiendeoCore.CatalogViewEntity, sectionInfo: TiendeoCore.CatalogsListSectionInfo?, didSelectItem: @escaping ((TiendeoCore.ListItemSelectable, Swift.Int, Swift.Bool) -> Swift.Void), didPressFavoriteButton: ((TiendeoCore.CatalogListItem) -> Swift.Void)?)
  public init(viewIdentifier: Swift.String = CouponListCollectionViewCell.reuseIdentifier(), type: TiendeoCore.CatalogsListItemType = .coupon, coupon: TiendeoCore.CatalogViewEntity, sectionInfo: TiendeoCore.CatalogsListSectionInfo?, didSelectItem: @escaping ((TiendeoCore.ListItemSelectable, Swift.Int, Swift.Bool) -> Swift.Void), didPressFavoriteButton: ((TiendeoCore.CatalogListItem) -> Swift.Void)?)
}
extension TiendeoCore.CatalogViewEntity {
  public func transformToCatalogListItem(viewIdentifier: Swift.String = CatalogListCollectionViewCell.reuseIdentifier(), sectionInfo: TiendeoCore.CatalogsListSectionInfo? = nil, didSelectItem: @escaping ((TiendeoCore.ListItemSelectable, Swift.Int, Swift.Bool) -> Swift.Void), didPressCatalogFavoriteButton: ((TiendeoCore.CatalogListItem) -> Swift.Void)?) -> TiendeoCore.CatalogListItem
}
@_inheritsConvenienceInitializers @objc public class VisibilityInspector : ObjectiveC.NSObject {
  @objc public func start()
  @objc public func stop()
  @objc override dynamic public init()
  @objc deinit
}
public class RefreshInfo {
  public init(userRepository: TiendeoCore.AppUserRepository)
  public func execute(_ requestValues: TiendeoCore.RefreshInfoRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class RefreshInfoRequestValues {
  public var countryCode: Swift.String
  public var appInfo: TiendeoCore.AppInfo
  public init(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo)
  @objc deinit
}
public protocol MallRepository {
  func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
}
public class CatalogRemoteDataSource : TiendeoCore.CatalogDataSource {
  public init()
  public func getCatalogs(requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogById(requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog?>
  public func getCatalogsByIds(catalogIds: [Swift.String], countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRelatedCatalogs(requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRecommendedCatalogs(requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class DeleteLoyaltyCardById {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteLoyaltyCardByIdRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteLoyaltyCardByIdRequestValues {
  public var countryCode: Swift.String
  public var isLogged: Swift.Bool
  public init(id: Swift.String, countryCode: Swift.String, isLogged: Swift.Bool)
  @objc deinit
}
public class SaveFavoriteCatalogDisplayed {
  public init(favoriteCatalogDisplayedRepository: TiendeoCore.FavoriteCatalogDisplayedRepository)
  public func execute(_ requestValues: TiendeoCore.SaveFavoriteCatalogDisplayedRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SaveFavoriteCatalogDisplayedRequestValues {
  public var countryCode: Swift.String
  public var catalogId: Swift.String
  public var expirationDate: Swift.String?
  public init(catalogId: Swift.String, expirationDate: Swift.String?, countryCode: Swift.String)
  @objc deinit
}
public class CashbackReward {
  public var id: Swift.String?
  public var promoCouponsId: [Swift.String]
  public var unitsLimit: Swift.Int
  public var unitsUsed: Swift.Int
  public var completed: Swift.Bool
  public var mandatory: Swift.Bool
  public init(id: Swift.String, promoCouponsId: [Swift.String], unitsLimit: Swift.Int, unitsUsed: Swift.Int, completed: Swift.Bool, mandatory: Swift.Bool)
  @objc deinit
}
extension TiendeoCore.PrintStatCatalogLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatCatalogLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modelName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var page: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var print: TiendeoCore.PrintStatLocal? {
    @objc get
    @objc set
  }
}
public class GetMallsByFilter {
  public init(mallRepository: TiendeoCore.MallRepository)
  public func execute(_ requestValues: TiendeoCore.GetMallsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  @objc deinit
}
public class GetMallsByFilterRequestValues {
  public var countryCode: Swift.String
  public var filterRequest: TiendeoCore.FilterRequestParams
  public init(filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String)
  @objc deinit
}
public protocol PixelsRepository {
  func sendPixelStats(requestValues: TiendeoCore.GetPixelsRequestValues) -> RxSwift.Observable<Swift.Bool>
}
extension QuartzCore.CALayer {
  public func addShadow(alpha: CoreFoundation.CGFloat, shadowAlpha: Swift.Float)
  public func roundCorners(radius: CoreFoundation.CGFloat)
}
public struct MallItemViewEntity {
  public let id: Swift.String
  public let name: Swift.String
  public let address: Swift.String
  public let zipCode: Swift.String
  public let city: Swift.String
  public let province: Swift.String
  public let suburb: Swift.String
  public let webUrl: Swift.String
  public let phone: Swift.String
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let distance: Swift.Float
  public let hasOffers: Swift.Bool
  public let imageUrl: Swift.String
}
extension TiendeoCore.MallItem {
  public func transformToUI() -> TiendeoCore.MallItemViewEntity
}
public struct FavoriteCatalogDisplayed {
  public let id: Swift.String
  public let countryCode: Swift.String
  public let expirationDate: Swift.String?
  public init(id: Swift.String, countryCode: Swift.String, expirationDate: Swift.String?)
}
public protocol ArticleExpirationLayout {
  var daysToExpire: Swift.Int { get }
  var daysSincePublication: Swift.Int { get }
  func getExpirationColor() -> UIKit.UIColor
}
extension TiendeoCore.ArticleExpirationLayout {
  public func getExpirationColor() -> UIKit.UIColor
  public func isLastDays() -> Swift.Bool
}
public struct ArticleItemViewEntity {
  public let name: Swift.String
  public let page: Swift.Int
  public let productId: Swift.String
}
extension TiendeoCore.ArticleItem {
  public func transformToUI() -> TiendeoCore.ArticleItemViewEntity
}
public struct ArticleViewEntity : TiendeoCore.ArticleExpirationLayout {
  public let type: TiendeoCore.OfferType
  public let articleName: Swift.String?
  public let brandName: Swift.String?
  public let description: Swift.String?
  public let price: Swift.String?
  public let oldPrice: Swift.String?
  public let promo: Swift.String?
  public let infoPrice: Swift.String?
  public let catalogId: Swift.String?
  public let shopfullyId: Swift.String?
  public let affinity: Swift.Int?
  public let catalogTitle: Swift.String?
  public let categoryId: Swift.String?
  public let page: Swift.Int
  public let items: [TiendeoCore.ArticleItemViewEntity]?
  public let retailer: TiendeoCore.RetailerViewEntity
  public let image: Swift.String
  public let expiresIn: Swift.String
  public let endPublication: Foundation.Date
  public let id: Swift.String
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let daysToExpire: Swift.Int
  public let daysSincePublication: Swift.Int
  public let catalogIsDynamic: Swift.Bool
  public let catalogExternalUrl: Swift.String?
  public let modelName: Swift.String?
  public var isSaved: Swift.Bool?
  public let isTagPage: Swift.Bool
  public var discountCode: Swift.String?
  public var shippingCostsText: Swift.String?
}
extension TiendeoCore.Article {
  public func transformToUI() -> TiendeoCore.ArticleViewEntity
}
extension TiendeoCore.ArticleViewEntity {
  public func transformToTagBox() -> TiendeoCore.TagBox
  public func transformToPrintStatArticleEntity(with position: Swift.Int) -> TiendeoCore.PrintStatArticleEntity
}
public struct SimpleDispatcher : TiendeoCore.TargetDispatcher {
  public func dispatchContents(for views: [UIKit.UIView : Foundation.TimeInterval])
  public mutating func setSessionId(_ UUIDString: Swift.String)
  public init()
}
public class GetLatestSearchAllResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLatestSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class DealRemoteDataSource : TiendeoCore.DealDataSource {
  public init()
  public func getDeals(with filterRequest: TiendeoCore.FilterRequestParams, categoryIds: [Swift.String], sortBy: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Deal]>
  public func getDealsCountByCategory(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.DealCount]>
  @objc deinit
}
public struct ClosureDispatcher : TiendeoCore.TargetDispatcher {
  public init(onDispatch: @escaping ([UIKit.UIView : Foundation.TimeInterval]) -> Swift.Void)
  public func dispatchContents(for views: [UIKit.UIView : Foundation.TimeInterval])
  public mutating func setSessionId(_ UUIDString: Swift.String)
}
@_hasMissingDesignatedInitializers public class ClosureDispatcherSpy : TiendeoCore.TargetDispatcher {
  public var dispatchedViews: [UIKit.UIView : Foundation.TimeInterval]
  public static let shared: TiendeoCore.ClosureDispatcherSpy
  public func dispatchContents(for views: [UIKit.UIView : Foundation.TimeInterval])
  public func setSessionId(_ UUIDString: Swift.String)
  @objc deinit
}
public struct DeepLinkStatsEntity {
  public let eventName: Swift.String
  public let clientTimeStamp: Swift.String
  public let userToken: Swift.String
  public let sourceType: Swift.String?
  public let sourceElementType: Swift.String?
  public let sourceElementId: Swift.String?
  public let sourceURL: Swift.String?
  public let platform: Swift.String
  public let integration: Swift.String
  public init(eventName: Swift.String, userToken: Swift.String, sourceType: Swift.String?, sourceElementType: Swift.String?, sourceElementId: Swift.String?, sourceURL: Swift.String?, integration: Swift.String)
}
public protocol CashbackRewardsRepository {
  func getCashbackRewards(with countryCode: Swift.String, isLogged: Swift.Bool) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
}
public class SendArticleShowStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendArticleShowStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendArticleShowStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var articleStatsEntity: TiendeoCore.ArticleStatsEntity
  public init(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity)
  @objc deinit
}
public class SendPrintStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendPrintStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendPrintStatsRequestValues : TiendeoCore.BaseRequestValues {
  public init()
  @objc deinit
}
public protocol StoreDetailRepository {
  func getStoreDetail(with id: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData) -> RxSwift.Observable<TiendeoCore.StoreDetail>
}
public protocol NotificationRepository {
  func getNotifications(countryCode: Swift.String, start: Swift.Int, count: Swift.Int, domain: TiendeoCore.UserNotificationDomain) -> RxSwift.Observable<[TiendeoCore.UserNotification]>
  func setNotificationsViewed() -> RxSwift.Observable<Swift.Void>
}
public protocol TargetDispatcher {
  func dispatchContents(for views: [UIKit.UIView : Foundation.TimeInterval])
  mutating func setSessionId(_ UUIDString: Swift.String)
}
public class MallRemoteDataSource : TiendeoCore.MallDataSource {
  public init()
  public func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  public func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  public func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public struct StatsLocationEntity {
  public var realLatitude: Swift.Float?
  public var realLongitude: Swift.Float?
  public var selectedLatitude: Swift.Float
  public var selectedLongitude: Swift.Float
  public var sfLatitude: Swift.Float
  public var sfLongitude: Swift.Float
  public var locationType: Swift.String
  public init(realLatitude: Swift.Float?, realLongitude: Swift.Float?, selectedLatitude: Swift.Float, selectedLongitude: Swift.Float, locationType: Swift.String, gdprEnabled: Swift.Bool, sfLatitude: Swift.Float?, sfLongitude: Swift.Float?)
}
extension TiendeoCore.StatsLocationEntity {
  public init(inputStatsEntity: TiendeoCore.InputStatsEntity?)
}
public protocol ConfigDataSource {
  func getGlobalIntegrations(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper?>
  func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public protocol FavoriteCatalogDisplayedDataSource {
  func saveFavoriteCatalogDisplayed(catalog: TiendeoCore.FavoriteCatalogDisplayed) -> RxSwift.Observable<Swift.Bool>
  func getFavoriteCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.FavoriteCatalogDisplayed]>
  func deleteExpiredCatalogs() -> RxSwift.Observable<Swift.Bool>
}
public class DeleteDefaultStore {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteDefaultStoreRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteDefaultStoreRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class GetNearestStoresById {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetNearestStoresRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetNearestStoresRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public class GetMallById {
  public init(mallRepository: TiendeoCore.MallRepository)
  public func execute(_ requestValues: TiendeoCore.GetMallByIdRequestValues) -> RxSwift.Observable<TiendeoCore.MallItem>
  @objc deinit
}
public class GetMallByIdRequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public protocol AppUserDataSource {
  func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public struct AppUserDataRepository : TiendeoCore.AppUserRepository {
  public init(remoteDataSource: TiendeoCore.AppUserDataSource)
  public func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  public func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public class CatalogDisplayedLocalDataSource : TiendeoCore.CatalogDisplayedDataSource {
  public init()
  public func getCatalogsDisplayedExpired(daysToExpireCatalog: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CatalogDisplayed]>
  public func saveCatalogsDisplayed(catalogs: [TiendeoCore.CatalogDisplayed]) -> RxSwift.Observable<Swift.Bool>
  public func deleteCatalogsDisplayed30DaysAgo() -> RxSwift.Observable<Swift.Bool>
  public func deleteAllCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func updateCatalogDisplayedOpenedStatus(_ requestValues: TiendeoCore.UpdateCatalogDisplayedOpenedStatusRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ProductCellRetailersView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func loadView() -> TiendeoCore.ProductCellRetailersView
  @_Concurrency.MainActor(unsafe) public func setup(urls: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct PromoCouponUser {
  public let id: Swift.String
  public let userId: Swift.String
  public let country: Swift.String
  public let loyaltyCardId: Swift.String
  public let promoCouponId: Swift.String
  public let externalId: Swift.String
  public let externalData: Swift.String
  public init(id: Swift.String, userId: Swift.String, country: Swift.String, loyaltyCardId: Swift.String, promoCouponId: Swift.String, externalId: Swift.String, externalData: Swift.String)
}
public struct StatsConstants {
  public struct EventName {
    public static let catalogBanner: Swift.String
    public static let catalogBottomMenu: Swift.String
  }
  public struct EventAction {
    public static let show: Swift.String
    public static let hideWithoutAds: Swift.String
    public static let hideNoSpace: Swift.String
    public static let pages: Swift.String
    public static let stores: Swift.String
    public static let recommender: Swift.String
    public static let share: Swift.String
  }
  public struct EventType {
    public static let bottom: Swift.String
  }
}
public class GetStoreDetailById {
  public init(storeDetailRepository: TiendeoCore.StoreDetailRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoreDetailByIdRequestValues) -> RxSwift.Observable<TiendeoCore.StoreDetail>
  @objc deinit
}
public class GetStoreDetailByIdRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public class TagBoxesDataRepository : TiendeoCore.TagBoxesRepository {
  public init(remoteDataSource: TiendeoCore.TagBoxesDataSource, localDataSource: TiendeoCore.TagBoxesDataSource)
  public func getTagBoxesByCatalogIdPaginated(requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesByCatalogId(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesByRetailerId(_ requestValues: TiendeoCore.GetSavedTagBoxesByRetailerIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesWithoutRetailerId(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func updateSavedTagBoxesRetailerId(with catalogs: [TiendeoCore.Catalog], countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteExpiredTagBoxes() -> RxSwift.Observable<Swift.Bool?>
  public func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func syncTagBoxes(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public struct UIImageViewAlignmentMask : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let center: TiendeoCore.UIImageViewAlignmentMask
  public static let left: TiendeoCore.UIImageViewAlignmentMask
  public static let right: TiendeoCore.UIImageViewAlignmentMask
  public static let top: TiendeoCore.UIImageViewAlignmentMask
  public static let bottom: TiendeoCore.UIImageViewAlignmentMask
  public static let topLeft: TiendeoCore.UIImageViewAlignmentMask
  public static let topRight: TiendeoCore.UIImageViewAlignmentMask
  public static let bottomLeft: TiendeoCore.UIImageViewAlignmentMask
  public static let bottomRight: TiendeoCore.UIImageViewAlignmentMask
  public typealias ArrayLiteralElement = TiendeoCore.UIImageViewAlignmentMask
  public typealias Element = TiendeoCore.UIImageViewAlignmentMask
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class UIImageViewAligned : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) open var alignment: TiendeoCore.UIImageViewAlignmentMask {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignTop: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignRight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alignBottom: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @objc deinit
}
public class StatsDataRepository : TiendeoCore.StatsRepository {
  public init(remoteDataSource: TiendeoCore.StatsDataSource, localDataSource: TiendeoCore.StatsDataSource)
  public func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleClipEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogOpeningStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendBannerActiontStats(baseUrl: Swift.String, bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendLoginEventStats(_ requestValues: TiendeoCore.SendLoginEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  public func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendPrintStats() -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public struct UserDefaultsConstants {
  public static let config: Swift.String
  public static let appUserId: Swift.String
  public static let governorCountryCode: Swift.String
  public static let userKey: Swift.String
  @available(*, deprecated, message: "No favorites in UserDefaults")
  public static let favorites: Swift.String
  public static let geofences: Swift.String
  public static let userDefaultReset: Swift.String
  public static let useEnageSdk: Swift.String
  public static let useSFTrackerSdk: Swift.String
  public static let sfClientUserId: Swift.String
  public struct Settings {
    public static let adsEnabled: Swift.String
    public static let gdprEnabled: Swift.String
    public static let gdprSaved: Swift.String
  }
  public struct FirstInstallation {
    public static let openSelectCity: Swift.String
    public static let openAppTimeStamp: Swift.String
    public static let firstCatalogViewed: Swift.String
    public static let engageInitialized: Swift.String
    public static let sfTrackerInitialized: Swift.String
    public static let locationEnabled: Swift.String
  }
  public struct Ratings {
    public static let openedCatalogsCondition: Swift.String
    public static let numberOfOpenedCatalogs: Swift.String
  }
}
public class SendCatalogToolbarStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendCatalogToolbarStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendCatalogToolbarStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity
  public init(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity)
  @objc deinit
}
public enum UserNotificationDomain : Swift.String {
  case cashback
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol PromoCouponDataSource {
  func getPromoCouponById(requestValues: TiendeoCore.GetPromoCouponByIdRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String, start: Swift.Int, count: Swift.Int, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  func getPromoCouponsTypeCashback(_ requestValues: TiendeoCore.GetPromoCouponsTypeCashbackRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  func getPromoCouponUser(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func addPromocouponUser(requestValues: TiendeoCore.AddPromoCouponUserRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
}
public struct ArticleStatsEntity {
  public let catalogId: Swift.String
  public let productId: Swift.String
  public let articleId: Swift.String?
  public let brandId: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let searchWord: Swift.String?
  public let searchCity: Swift.String?
  public let integration: Swift.String?
  public let userToken: Swift.String
  public let platform: Swift.String
  public let openingHash: Swift.String?
  public let view: Swift.String?
  public let origin: Swift.String?
  public let version: Swift.String?
  public let pageNumber: Swift.Int
  public var itemType: Swift.String
  public let saleId: Swift.String?
  public var sessionId: Swift.String
  public init(catalogId: Swift.String, productId: Swift.String, articleId: Swift.String?, brandId: Swift.String, searchWord: Swift.String?, searchCity: Swift.String?, integration: Swift.String?, userToken: Swift.String, openingHash: Swift.String?, view: Swift.String?, origin: Swift.String?, version: Swift.String?, pageNumber: Swift.Int, itemType: Swift.String, saleId: Swift.String?, sessionId: Swift.String)
}
extension TiendeoCore.InputStatsEntity {
  public func transformToArticleStatsEntity(catalogId: Swift.String, productId: Swift.String, articleId: Swift.String?, brandId: Swift.String, pageNumber: Swift.Int, itemType: TiendeoCore.OfferStatsType, saleId: Swift.String?) -> TiendeoCore.ArticleStatsEntity
}
public struct SearchResultSection {
  public let headerName: Swift.String
  public let footerName: Swift.String?
  public let items: [TiendeoCore.SearchResult]
  public init(headerName: Swift.String, footerName: Swift.String? = nil, items: [TiendeoCore.SearchResult])
}
public class GetRetailers {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  @objc deinit
}
public class GetRetailersRequestValues {
  public var countryCode: Swift.String
  final public let sort: Swift.String
  final public let start: Swift.Int?
  final public let count: Swift.Int?
  public init(countryCode: Swift.String, sort: Swift.String? = "+top", start: Swift.Int? = nil, count: Swift.Int? = nil)
  @objc deinit
}
public struct TagBoxesRemoteDataSource : TiendeoCore.TagBoxesDataSource {
  public init()
  public func getTagBoxesByCatalogIdPaginated(requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesByCatalogId(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesByRetailerId(_ requestValues: TiendeoCore.GetSavedTagBoxesByRetailerIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxesWithoutRetailerId(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func updateSavedTagBoxesRetailerId(with catalogs: [TiendeoCore.Catalog], countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteExpiredTagBoxes() -> RxSwift.Observable<Swift.Bool?>
  public func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
}
public protocol FavoritesDataSource {
  func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func getFavorite(_ requestValues: TiendeoCore.GetFavoriteRequestValues) -> RxSwift.Observable<TiendeoCore.Favorite?>
  func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func migrateFavorites() -> RxSwift.Observable<Swift.Bool>
}
@_inheritsConvenienceInitializers @objc(PrintStatLocal) public class PrintStatLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension TiendeoCore.LoyaltyCardLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.LoyaltyCardLocal>
  @objc @NSManaged dynamic public var code: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var codeFormat: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
}
public protocol SearchResultsDataSource {
  func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getSearchProductResults(with searchNames: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getSavedSearchProductResultsWithoutCategoryName() -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func updateSavedSearchProductResultsCategoryName(with searchResults: [TiendeoCore.SearchResult]) -> RxSwift.Observable<Swift.Bool?>
}
public class GetSearchProductResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class PromoCoupon {
  final public let id: Swift.String
  final public let status: Swift.String
  final public let promoCouponType: TiendeoCore.PromoCouponType
  final public let startDate: Swift.String
  final public let endDate: Swift.String
  final public let publicationStartDateTimestamp: Swift.Double
  final public let publicationEndDateTimestamp: Swift.Double
  final public let shortDescription: Swift.String
  final public let longDescription: Swift.String
  final public let imageUrl: Swift.String
  final public let title: Swift.String
  final public let amount: Swift.String
  final public let amountFormatted: Swift.String
  final public let amountNumber: Swift.Double
  final public let units: Swift.String
  final public let url: Swift.String
  final public let buttonText: Swift.String
  final public let externalId: Swift.String?
  final public let readableStartDate: Swift.String
  final public let readableEndDate: Swift.String
  public var isSaved: Swift.Bool
  public var retailers: [TiendeoCore.PromoCouponRetailer]?
  public var discountType: Swift.String
  public init(id: Swift.String, status: Swift.String, promoCouponType: TiendeoCore.PromoCouponType, startDate: Swift.String, endDate: Swift.String, publicationStartDateTimestamp: Swift.Double, publicationEndDateTimestamp: Swift.Double, shortDescription: Swift.String, longDescription: Swift.String, imageUrl: Swift.String, title: Swift.String, amount: Swift.String, amountFormatted: Swift.String, amountNumber: Swift.Double, units: Swift.String, url: Swift.String, buttonText: Swift.String, externalId: Swift.String?, readableStartDate: Swift.String, readableEndDate: Swift.String, isSaved: Swift.Bool, retailers: [TiendeoCore.PromoCouponRetailer]?, discountType: Swift.String)
  @objc deinit
}
public enum UserApi : Alamofire.URLRequestConvertible {
  case getUser
  public func asURLRequest() throws -> Foundation.URLRequest
  public static func == (a: TiendeoCore.UserApi, b: TiendeoCore.UserApi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TiendeoCore.FavoriteCatalogDisplayedLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.FavoriteCatalogDisplayedLocal>
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expirationDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
public class CatalogDisplayedDataRepository : TiendeoCore.CatalogDisplayedRepository {
  public init(localDataSource: TiendeoCore.CatalogDisplayedDataSource)
  public func getCatalogsDisplayedExpired(daysToExpireCatalog: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CatalogDisplayed]>
  public func saveCatalogsDisplayed(catalogs: [TiendeoCore.CatalogDisplayed]) -> RxSwift.Observable<Swift.Bool>
  public func deleteAllCatalogsDisplayed(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func updateCatalogDisplayedOpenedStatus(_ requestValues: TiendeoCore.UpdateCatalogDisplayedOpenedStatusRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SearchResultLocal) public class SearchResultLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct CatalogViewEntity {
  public let catalogId: Swift.String
  public let shopfullyId: Swift.String?
  public let pageNumber: Swift.Int
  public let numPages: Swift.Int
  public let storeId: Swift.String
  public let retailer: TiendeoCore.RetailerViewEntity?
  public let catalogMiniImage: Swift.String?
  public let catalogSmallImage: Swift.String?
  public let catalogBigImage: Swift.String?
  public let categoryName: Swift.String?
  public let expirationDate: Foundation.Date?
  public let activationDate: Foundation.Date?
  public let expirationDays: Swift.Int?
  public let title: Swift.String?
  public let coupon: TiendeoCore.CouponViewEntity?
  public let withAds: Swift.Bool?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public let externalUrl: Swift.String
  public var favoriteId: Swift.String?
  public let description: Swift.String?
  public let sections: [TiendeoCore.CatalogSectionViewEntity]?
  public let showDetails: Swift.Bool?
  public var modelName: Swift.String?
  public let isDynamic: Swift.Bool
  public let isOnCampaing: Swift.Bool
  public var displayed: Swift.Bool?
  public var affinity: Swift.Int?
  public init(catalogId: Swift.String, shopfullyId: Swift.String?, pageNumber: Swift.Int, numPages: Swift.Int, storeId: Swift.String, retailer: TiendeoCore.RetailerViewEntity?, catalogMiniImage: Swift.String?, catalogSmallImage: Swift.String?, catalogBigImage: Swift.String?, categoryName: Swift.String?, expirationDate: Foundation.Date?, activationDate: Foundation.Date?, expirationDays: Swift.Int?, title: Swift.String?, coupon: TiendeoCore.CouponViewEntity?, withAds: Swift.Bool?, width: Swift.Int?, height: Swift.Int?, externalUrl: Swift.String, favoriteId: Swift.String?, description: Swift.String?, sections: [TiendeoCore.CatalogSectionViewEntity]?, showDetails: Swift.Bool?, modelName: Swift.String?, isDynamic: Swift.Bool, isOnCampaing: Swift.Bool, displayed: Swift.Bool?, affinity: Swift.Int?)
  public func getSmallImageUrlForCell() -> Swift.String?
  public func loadBigImageWithIndex(index: Swift.String) -> Swift.String?
  public func loadSmallImageWithIndex(index: Swift.String) -> Swift.String?
  public func loadMiniImageWithIndex(index: Swift.String) -> Swift.String?
  public func expirationText() -> Swift.String
  public func isCoupon() -> Swift.Bool
  public func getShareURL(pathWeb: Swift.String, pathCatalog: Swift.String, pageNumber: Swift.Int, countryCode: Swift.String) -> Foundation.URL?
  public func isExpired() -> Swift.Bool
}
extension TiendeoCore.Catalog {
  public func transformToUI(staticUrl: Swift.String, pathWeb: Swift.String, pathCoupons: Swift.String, provider: Swift.String) -> TiendeoCore.CatalogViewEntity
}
public struct UserNotificationInfo {
  public let amount: Swift.Double?
  public let amountFormatted: Swift.String?
  public let status: TiendeoCore.UserNotificationStatus
  public let ticketId: Swift.String?
  public init(amount: Swift.Double?, amountFormatted: Swift.String?, status: TiendeoCore.UserNotificationStatus, ticketId: Swift.String?)
}
public class ArticleDataRepository : TiendeoCore.ArticleRepository {
  public init(remoteDataSource: TiendeoCore.ArticleDataSource)
  public func getRecommendedArticles(with getRecommendedArticlesByLatLonAndSearchWordRequestValues: TiendeoCore.GetRecommendedArticlesByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public struct ViewerProConfigEntity {
  public let urlFacebook: Swift.String
  public let urlTwitter: Swift.String
  public let urlLegalAdv: Swift.String
  public let prefixReplace: Swift.String
  public let prefixStatic: Swift.String
  public let staticsValues: Swift.String
  public let urlLicenses: Swift.String
  public let urlAboutTiendeo: Swift.String
  public let urlConditionsOfUse: Swift.String
  public let urlPrivacyPolicy: Swift.String
  public let rutaWeb: Swift.String
  public let clicksForRate: Swift.Int
  public let adMobLanding: Swift.Bool
  public let staticUrl: Swift.String
  public let baseUrlStatsApi: Swift.String
  public let pathCatalogs: Swift.String
  public let pathCoupons: Swift.String
  public static func map(config: [Swift.String : Any]) -> TiendeoCore.ViewerProConfigEntity?
}
public class SendBannerActiontStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendBannerActiontStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendBannerActiontStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity
  public init(baseUrl: Swift.String, bannerActionStatsEntity: TiendeoCore.BannerActionStatsEntity)
  @objc deinit
}
public class GetTopProducts {
  public init(productsRepository: TiendeoCore.ProductsRepository)
  public func execute(_ requestValues: TiendeoCore.GetTopProductsRequestValues) -> RxSwift.Observable<[TiendeoCore.Product]>
  @objc deinit
}
public class GetTopProductsRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol LogEvent {
  typealias ParametersType = [Swift.String : Any]
  var name: Swift.String { get }
  var parameters: Self.ParametersType { get }
}
public struct CoreAnalyticsService {
  public static func log(event: TiendeoCore.LogEvent)
  public static func basicParameters(appUserId: Swift.String?, cityName: Swift.String?, countryCode: Swift.String?) -> [Swift.String : Any]
}
public struct EngageAnalyticsService {
  public static func log(event: TiendeoCore.LogEvent)
}
public struct AdjustCoreAnalyticsService {
  public static func log(event: Swift.String)
}
public struct AppsflyerAnalyticsService {
  public static func log(event: TiendeoCore.LogEvent)
}
public class GetCatalogsByRetailerIdAndClientStoreId {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByClientStoreIdRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByClientStoreIdRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
public struct RecommendedLoyaltyCard {
  public let id: Swift.String
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let retailerImage: Swift.String
}
public struct LoginEventStatsEntity {
  public let eventName: Swift.String?
  public let type: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String
  public let integration: Swift.String?
  public let provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let origin: Swift.String?
}
extension TiendeoCore.InputStatsEntity {
  public func transformToLoginEventStatsEntity(type: Swift.String) -> TiendeoCore.LoginEventStatsEntity
}
public class SyncFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.SyncFavoritesRequestValues) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  @objc deinit
}
public class SyncFavoritesRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct CatalogEventStatsEntity {
  public let eventName: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let action: Swift.String
  public let type: Swift.String?
  public init(eventName: Swift.String, action: Swift.String, type: Swift.String? = nil)
}
public class GetPromoCouponsTypeCashback {
  public init(promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ requestValues: TiendeoCore.GetPromoCouponsTypeCashbackRequestValues) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  @objc deinit
}
public class GetPromoCouponsTypeCashbackRequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String, start: Swift.Int, count: Swift.Int)
  @objc deinit
}
public class GetRelatedCatalogs {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetRelatedCatalogsRequestValues : TiendeoCore.AppDataRequestValues {
  public var appData: TiendeoCore.AppData
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String, appData: TiendeoCore.AppData)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PrintStatBannerLocal) public class PrintStatBannerLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct AppInfo {
  public let userToken: Swift.Int
  public let senderToken: Swift.String?
  public let integrationName: Swift.String?
  public let uuid: Swift.String?
  public let wifiMAC: Swift.String?
  public let origin: Swift.String?
  public let subori: Swift.String?
  public let lastUpdate: Swift.Int?
  public init(userToken: Swift.Int, senderToken: Swift.String? = nil, integrationName: Swift.String? = nil, uuid: Swift.String? = nil, wifiMAC: Swift.String? = nil, origin: Swift.String? = nil, subori: Swift.String? = nil, lastUpdate: Swift.Int? = nil)
}
public struct CategoriesDataRepository : TiendeoCore.CategoriesRepository {
  public init(dataSources: [TiendeoCore.CategoriesDataSource])
  public func getCategories(requestValues: TiendeoCore.GetCategoriesRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  public func getCategories(requestValues: TiendeoCore.GetCategoriesByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
public protocol ListSection {
  var headerItem: TiendeoCore.ListItem? { get set }
  var cellItems: [TiendeoCore.ListItem] { get set }
  var footerItem: TiendeoCore.ListItem? { get set }
}
extension Swift.Sequence where Self.Element == TiendeoCore.ListSection {
  public func updateFavoriteStatus(retailerId: Swift.String, favoriteId: Swift.String?) -> [TiendeoCore.ListSection]
}
extension TiendeoCore.TndStyles : Swift.Equatable {}
extension TiendeoCore.TndStyles : Swift.Hashable {}
extension TiendeoCore.TndStyles : Swift.RawRepresentable {}
extension TiendeoCore.TndColor : Swift.Equatable {}
extension TiendeoCore.TndColor : Swift.Hashable {}
extension TiendeoCore.TndColor : Swift.RawRepresentable {}
extension TiendeoCore.StatsPageType : Swift.Equatable {}
extension TiendeoCore.StatsPageType : Swift.Hashable {}
extension TiendeoCore.StatsPageType : Swift.RawRepresentable {}
extension TiendeoCore.StatsSearchType : Swift.Equatable {}
extension TiendeoCore.StatsSearchType : Swift.Hashable {}
extension TiendeoCore.StatsSearchType : Swift.RawRepresentable {}
extension TiendeoCore.StatsView : Swift.Equatable {}
extension TiendeoCore.StatsView : Swift.Hashable {}
extension TiendeoCore.StatsView : Swift.RawRepresentable {}
extension TiendeoCore.PromoCouponType : Swift.Equatable {}
extension TiendeoCore.PromoCouponType : Swift.Hashable {}
extension TiendeoCore.PromoCouponType : Swift.RawRepresentable {}
extension TiendeoCore.CatalogsListSectionType : Swift.Equatable {}
extension TiendeoCore.CatalogsListSectionType : Swift.Hashable {}
extension TiendeoCore.ReadingEndAction : Swift.Equatable {}
extension TiendeoCore.ReadingEndAction : Swift.Hashable {}
extension TiendeoCore.ReadingEndAction : Swift.RawRepresentable {}
extension TiendeoCore.CatalogsListItemType : Swift.Equatable {}
extension TiendeoCore.CatalogsListItemType : Swift.Hashable {}
extension TiendeoCore.OfferType : Swift.Equatable {}
extension TiendeoCore.OfferType : Swift.Hashable {}
extension TiendeoCore.OfferType : Swift.RawRepresentable {}
extension TiendeoCore.OfferStatsType : Swift.Equatable {}
extension TiendeoCore.OfferStatsType : Swift.Hashable {}
extension TiendeoCore.OfferStatsType : Swift.RawRepresentable {}
extension TiendeoCore.RepositoryErrors : Swift.Equatable {}
extension TiendeoCore.RepositoryErrors : Swift.Hashable {}
extension TiendeoCore.RepositoryErrors : Swift.RawRepresentable {}
extension TiendeoCore.FilterType : Swift.Equatable {}
extension TiendeoCore.FilterType : Swift.Hashable {}
extension TiendeoCore.FilterType : Swift.RawRepresentable {}
extension TiendeoCore.UserNotificationStatus : Swift.Equatable {}
extension TiendeoCore.UserNotificationStatus : Swift.Hashable {}
extension TiendeoCore.UserNotificationStatus : Swift.RawRepresentable {}
extension TiendeoCore.TagBoxAction : Swift.Equatable {}
extension TiendeoCore.TagBoxAction : Swift.Hashable {}
extension TiendeoCore.PixelType : Swift.Equatable {}
extension TiendeoCore.PixelType : Swift.Hashable {}
extension TiendeoCore.PixelType : Swift.RawRepresentable {}
extension TiendeoCore.CouponType : Swift.Equatable {}
extension TiendeoCore.CouponType : Swift.Hashable {}
extension TiendeoCore.ChipType : Swift.Equatable {}
extension TiendeoCore.ChipType : Swift.Hashable {}
extension TiendeoCore.ChipType : Swift.RawRepresentable {}
extension TiendeoCore.UserNotificationType : Swift.Equatable {}
extension TiendeoCore.UserNotificationType : Swift.Hashable {}
extension TiendeoCore.UserNotificationType : Swift.RawRepresentable {}
extension TiendeoCore.UserNotificationDomain : Swift.Equatable {}
extension TiendeoCore.UserNotificationDomain : Swift.Hashable {}
extension TiendeoCore.UserNotificationDomain : Swift.RawRepresentable {}
extension TiendeoCore.UserApi : Swift.Equatable {}
extension TiendeoCore.UserApi : Swift.Hashable {}
